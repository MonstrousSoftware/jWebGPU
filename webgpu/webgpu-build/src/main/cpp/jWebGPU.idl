// ################################### CUSTOM CODE ###################################

interface WGPU {
    static WGPUPlatformType GetPlatformType();
    [Value] static WebGPUInstance CreateInstance();
};

interface WGPUAndroidWindow {
    void WGPUAndroidWindow();
    void InitLogcat();
};

interface WGPUByteBuffer {
    void WGPUByteBuffer(long capacity);
    [Value] static WGPUByteBuffer Obtain(long capacity);
    void order(WGPUByteOrder order);
    byte get(long index);
    [BindTo="put"] void put_0(byte value);
    [BindTo="put"] void put_1(long index, byte value);
    byte get();
    long remaining();
    long getCapacity();
    void position(long newPosition);
    long getPosition();
    void limit(long newLimit);
    long getLimit();
    void clear();
    void flip();
    [Ref] WGPUFloatBuffer asFloatBuffer();
    [Ref] WGPUIntBuffer asIntBuffer();
    [Ref] WGPULongBuffer asLongBuffer();
    [Ref] WGPUShortBuffer asShortBuffer();
};

interface WGPUFloatBuffer {
    [Ref] WGPUByteBuffer getByteBuffer();
    [BindTo="put"] void put_0(float value);
    [BindTo="put"] void put_1(long index, float value);
    float get(long index);
    float get();
    long remaining();
    long getCapacity();
    void clear();
    void limit(long newLimit);
    long getLimit();
    void position(long newPosition);
    long getPosition();
    void flip();
};

interface WGPUIntBuffer {
    [Ref] WGPUByteBuffer getByteBuffer();
    [BindTo="put"] void put_0(long value);
    [BindTo="put"] void put_1(long index, long value);
    long get(long index);
    long get();
    long remaining();
    long getCapacity();
    void clear();
    void limit(long newLimit);
    long getLimit();
    void position(long newPosition);
    long getPosition();
    void flip();
};

interface WGPULongBuffer {
    [Ref] WGPUByteBuffer getByteBuffer();
    [BindTo="put"] void put_0(long long value);
    [BindTo="put"] void put_1(long index, long long value);
    long long get(long index);
    long long get();
    long remaining();
    long getCapacity();
    void clear();
    void limit(long newLimit);
    long getLimit();
    void position(long newPosition);
    long getPosition();
    void flip();
};

interface WGPUShortBuffer {
    [Ref] WGPUByteBuffer getByteBuffer();
    [BindTo="put"] void put_0(short value);
    [BindTo="put"] void put_1(long index, short value);
    short get(long index);
    short get();
    long remaining();
    long getCapacity();
    void clear();
    void limit(long newLimit);
    long getLimit();
    void position(long newPosition);
    long getPosition();
    void flip();
};

enum WGPUByteOrder {
    "WGPUByteBuffer::BigEndian", //[-RENAME=BigEndian]
    "WGPUByteBuffer::LittleEndian" //[-RENAME=LittleEndian]
};

enum WGPUPlatformType {
    "WGPU_Windows",
    "WGPU_Mac",
    "WGPU_Linux",
    "WGPU_iOS",
    "WGPU_Android",
    "WGPU_Web",
    "WGPU_Unknown",
};

// ################################### VECTORS ###################################

interface WGPUVectorBindGroupEntry {
    void WGPUVectorBindGroupEntry();
    [Value] static WGPUVectorBindGroupEntry Obtain();
    void push_back([Ref] WebGPUBindGroupEntry entry);
};

interface WGPUVectorColorTargetState {
    void WGPUVectorColorTargetState();
    [Value] static WGPUVectorColorTargetState Obtain();
    void push_back([Ref] WebGPUColorTargetState colorTargetState);
};

interface WGPUVectorFeatureName {
    void WGPUVectorFeatureName();
    [Value] static WGPUVectorFeatureName Obtain();
    void push_back(WGPUFeatureName featureName);
};

interface WGPUVectorConstantEntry {
    void WGPUVectorConstantEntry();
    [Value] static WGPUVectorConstantEntry Obtain();
    void push_back([Ref] WebGPUConstantEntry constantEntry);
};

interface WGPUVectorVertexBufferLayout {
    void WGPUVectorVertexBufferLayout();
    [Value] static WGPUVectorVertexBufferLayout Obtain();
    void push_back([Ref] WebGPUVertexBufferLayout vertexBufferLayout);
};

interface WGPUVectorTextureFormat {
    void WGPUVectorTextureFormat();
    [Value] static WGPUVectorTextureFormat Obtain();
    void push_back(WGPUTextureFormat textureFormat);
};

interface WGPUVectorRenderBundle {
    void WGPUVectorRenderBundle();
    [Value] static WGPUVectorRenderBundle Obtain();
    void push_back([Ref] WebGPURenderBundle renderBundle);
};

interface WGPUVectorRenderPassColorAttachment {
    void WGPUVectorRenderPassColorAttachment();
    [Value] static WGPUVectorRenderPassColorAttachment Obtain();
    void push_back([Ref] WebGPURenderPassColorAttachment colorAttachment);
};

interface WGPUVectorVertexAttribute {
    void WGPUVectorVertexAttribute();
    [Value] static WGPUVectorVertexAttribute Obtain();
    void push_back([Ref] WebGPUVertexAttribute colorAttachment);
};

interface WGPUVectorBindGroupLayout {
    void WGPUVectorBindGroupLayout();
    [Value] static WGPUVectorBindGroupLayout Obtain();
    void push_back([Ref] WebGPUBindGroupLayout groupLayout);
};

interface WGPUVectorBindGroupLayoutEntry {
    void WGPUVectorBindGroupLayoutEntry();
    [Value] static WGPUVectorBindGroupLayoutEntry Obtain();
    void push_back([Ref] WebGPUBindGroupLayoutEntry groupLayout);
};

interface WGPUVectorInt {
    void WGPUVectorInt();
    [Value] static WGPUVectorInt Obtain();
    long size();
    void push_back(long value);
    long get(long index);
};

// ################################### CALLBACKS ###################################

interface RequestAdapterCallback {
};

[JSImplementation="RequestAdapterCallback"]
interface RequestAdapterCallbackImpl {
    void RequestAdapterCallbackImpl();
    void OnCallback(WGPURequestAdapterStatus status, WebGPUAdapter adapter);
};

interface RequestDeviceCallback {
};

[JSImplementation="RequestDeviceCallback"]
interface RequestDeviceCallbackImpl {
    void RequestDeviceCallbackImpl();
    void OnCallback(WGPURequestDeviceStatus status, WebGPUDevice device);
};

interface UncapturedErrorCallback {
};

[JSImplementation="UncapturedErrorCallback"]
interface UncapturedErrorCallbackImpl {
    void UncapturedErrorCallbackImpl();
    void OnCallback(WGPUErrorType errorType, [Const] DOMString message);
};

interface BufferMapCallback {
};

[JSImplementation="BufferMapCallback"]
interface BufferMapCallbackImpl {
    void BufferMapCallbackImpl();
    void OnCallback(WGPUMapAsyncStatus status, [Const] DOMString message);
};

// ################################### STRUCTS ###################################

interface WebGPUAdapterInfo {
    void WebGPUAdapterInfo();
    [Value] static WebGPUAdapterInfo Obtain();
    [Value] IDLString GetVendor();
    long GetVendorID();
    [Value] IDLString GetArchitecture();
    [Value] IDLString GetDevice();
    long GetDeviceID();
    [Value] IDLString GetDescription();
    WGPUBackendType GetBackendType();
    WGPUAdapterType GetAdapterType();
};

interface WebGPULimits {
    void WebGPULimits();
    [Value] static WebGPULimits Obtain();

    void SetMaxTextureDimension1D(long value);
    long GetMaxTextureDimension1D();

    void SetMaxTextureDimension2D(long value);
    long GetMaxTextureDimension2D();

    void SetMaxTextureDimension3D(long value);
    long GetMaxTextureDimension3D();

    void SetMaxTextureArrayLayers(long value);
    long GetMaxTextureArrayLayers();

    void SetMaxBindGroups(long value);
    long GetMaxBindGroups();

    void SetMaxBindGroupsPlusVertexBuffers(long value);
    long GetMaxBindGroupsPlusVertexBuffers();

    void SetMaxBindingsPerBindGroup(long value);
    long GetMaxBindingsPerBindGroup();

    void SetMaxDynamicUniformBuffersPerPipelineLayout(long value);
    long GetMaxDynamicUniformBuffersPerPipelineLayout();

    void SetMaxDynamicStorageBuffersPerPipelineLayout(long value);
    long GetMaxDynamicStorageBuffersPerPipelineLayout();

    void SetMaxSampledTexturesPerShaderStage(long value);
    long GetMaxSampledTexturesPerShaderStage();

    void SetMaxSamplersPerShaderStage(long value);
    long GetMaxSamplersPerShaderStage();

    void SetMaxStorageBuffersPerShaderStage(long value);
    long GetMaxStorageBuffersPerShaderStage();

    void SetMaxStorageTexturesPerShaderStage(long value);
    long GetMaxStorageTexturesPerShaderStage();

    void SetMaxUniformBuffersPerShaderStage(long value);
    long GetMaxUniformBuffersPerShaderStage();

    void SetMaxUniformBufferBindingSize(long value);
    long GetMaxUniformBufferBindingSize();

    void SetMaxStorageBufferBindingSize(long value);
    long GetMaxStorageBufferBindingSize();

    void SetMinUniformBufferOffsetAlignment(long value);
    long GetMinUniformBufferOffsetAlignment();

    void SetMinStorageBufferOffsetAlignment(long value);
    long GetMinStorageBufferOffsetAlignment();

    void SetMaxVertexBuffers(long value);
    long GetMaxVertexBuffers();

    void SetMaxBufferSize(long long value);
    long GetMaxBufferSize();

    void SetMaxVertexAttributes(long value);
    long GetMaxVertexAttributes();

    void SetMaxVertexBufferArrayStride(long value);
    long GetMaxVertexBufferArrayStride();

    void SetMaxInterStageShaderVariables(long value);
    long GetMaxInterStageShaderVariables();

    void SetMaxColorAttachments(long value);
    long GetMaxColorAttachments();

    void SetMaxColorAttachmentBytesPerSample(long value);
    long GetMaxColorAttachmentBytesPerSample();

    void SetMaxComputeWorkgroupStorageSize(long value);
    long GetMaxComputeWorkgroupStorageSize();

    void SetMaxComputeInvocationsPerWorkgroup(long value);
    long GetMaxComputeInvocationsPerWorkgroup();

    void SetMaxComputeWorkgroupSizeX(long value);
    long GetMaxComputeWorkgroupSizeX();

    void SetMaxComputeWorkgroupSizeY(long value);
    long GetMaxComputeWorkgroupSizeY();

    void SetMaxComputeWorkgroupSizeZ(long value);
    long GetMaxComputeWorkgroupSizeZ();

    void SetMaxComputeWorkgroupsPerDimension(long value);
    long GetMaxComputeWorkgroupsPerDimension();
};

interface WebGPURequestAdapterOptions {
    void WebGPURequestAdapterOptions();
    [Value] static WebGPURequestAdapterOptions Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetFeatureLevel(WGPUFeatureLevel featureLevel);
    void SetPowerPreference(WGPUPowerPreference powerPreference);
    void SetBackendType(WGPUBackendType backendType);
    void SetCompatibleSurface(WebGPUSurface compatibleSurface);
};

interface WebGPUShaderSourceWGSL {
    void WebGPUShaderSourceWGSL();
    [Value] static WebGPUShaderSourceWGSL Obtain();
    void SetCode([Const] DOMString code);
    void SetNext(WebGPUChainedStruct value);
    void SetSType(WGPUSType type);
    [Value] WebGPUChainedStruct GetChain();
};

interface WebGPUSupportedFeatures {
    void WebGPUSupportedFeatures();
    [Value] static WebGPUSupportedFeatures Obtain();
    long GetFeatureCount();
    WGPUFeatureName GetFeatureAt(long index);
};

interface WebGPUBlendComponent {
    void SetOperation(WGPUBlendOperation operation);
    WGPUBlendOperation GetOperation();
    void SetSrcFactor(WGPUBlendFactor factor);
    WGPUBlendFactor GetSrcFactor();
    void SetDstFactor(WGPUBlendFactor factor);
    WGPUBlendFactor GetDstFactor();
};

interface WebGPUBlendState {
    void WebGPUBlendState();
    [Value] static WebGPUBlendState Obtain();
    [Value] WebGPUBlendComponent GetColor();
    [Value] WebGPUBlendComponent GetAlpha();
};

interface WebGPUConstantEntry {
    void WebGPUConstantEntry();
};

interface WebGPUFragmentState {
    void WebGPUFragmentState();
    [Value] static WebGPUFragmentState Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetEntryPoint([Const] DOMString entryPoint);
    void SetTargets(WGPUVectorColorTargetState targets);
    void SetModule(WebGPUShaderModule shaderModule);
    void SetConstants(WGPUVectorConstantEntry constants);
};

interface WebGPUVertexAttribute {
    void WebGPUVertexAttribute();
    [Value] static WebGPUVertexAttribute Obtain();
    void SetFormat(WGPUVertexFormat format);
    void SetOffset(long offset);
    void SetShaderLocation(long shaderLocation);
};

interface WebGPUVertexBufferLayout {
    void WebGPUVertexBufferLayout();
    [Value] static WebGPUVertexBufferLayout Obtain();
    void SetAttributes(WGPUVectorVertexAttribute values);
    void SetArrayStride(long offset);
    void SetStepMode(WGPUVertexStepMode stepMode);
};

interface WebGPUVertexState {
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetModule(WebGPUShaderModule shaderModule);
    void SetEntryPoint([Const] DOMString entryPoint);
    void SetConstants(WGPUVectorConstantEntry constants);
    void SetBuffers(WGPUVectorVertexBufferLayout buffers);
};

interface WebGPUColorTargetState {
    void WebGPUColorTargetState();
    [Value] static WebGPUColorTargetState Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetFormat(WGPUTextureFormat format);
    void SetBlend(WebGPUBlendState blendState);
    void SetWriteMask(WGPUColorWriteMask writeMask);
};

interface WebGPUStencilFaceState {
//    void WebGPUStencilFaceState();
//    [Value] static WebGPUStencilFaceState Obtain();
    void SetCompare(WGPUCompareFunction compare);
    void SetFailOp(WGPUStencilOperation failOp);
    void SetDepthFailOp(WGPUStencilOperation depthFailOp);
    void SetPassOp(WGPUStencilOperation passOp);
};

interface WebGPUDepthStencilState {
    void WebGPUDepthStencilState();
    [Value] static WebGPUDepthStencilState Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetFormat(WGPUTextureFormat format);
    void SetDepthWriteEnabled(WGPUOptionalBool depthWriteEnabled);
    void SetDepthCompare(WGPUCompareFunction depthCompare);
    void SetDepthBiasSlopeScale(float depthBiasSlopeScale);
    void SetDepthBiasClamp(float depthBiasClamp);
    void SetStencilReadMask(long stencilReadMask);
    void SetStencilWriteMask(long stencilWriteMask);
    void SetDepthBias(long depthBias);
    [Value] WebGPUStencilFaceState GetStencilFront();
    [Value] WebGPUStencilFaceState GetStencilBack();
};

interface WebGPUMultisampleState {
    void WebGPUMultisampleState();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetCount(long count);
    void SetMask(long mask);
    void SetAlphaToCoverageEnabled(long alphaToCoverageEnabled);
};

interface WebGPUPrimitiveState {
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetTopology(WGPUPrimitiveTopology value);
    void SetStripIndexFormat(WGPUIndexFormat value);
    void SetFrontFace(WGPUFrontFace value);
    void SetCullMode(WGPUCullMode value);
};

interface WebGPURenderPassDepthStencilAttachment {
    void WebGPURenderPassDepthStencilAttachment();
    [Value] static WebGPURenderPassDepthStencilAttachment Obtain();
//    void SetNextInChain(WebGPUChainedStruct chainedStruct); // TODO dont exist in wgpu-native
    void SetView(WebGPUTextureView textureView);
    void SetDepthLoadOp(WGPULoadOp loadOp);
    void SetDepthStoreOp(WGPUStoreOp storeOp);
    void SetDepthClearValue(float depthClearValue);
    void SetDepthReadOnly(boolean depthReadOnly);
    void SetStencilLoadOp(WGPULoadOp loadOp);
    void SetStencilStoreOp(WGPUStoreOp storeOp);
    void SetStencilClearValue(long stencilClearValue);
    void SetStencilReadOnly(boolean stencilReadOnly);
};

interface WebGPURenderPassTimestampWrites {
    void WebGPURenderPassTimestampWrites();
    [Value] static WebGPURenderPassTimestampWrites Obtain();
    void SetQuerySet(WebGPUQuerySet value);
    void SetBeginningOfPassWriteIndex(long value);
    void SetEndOfPassWriteIndex(long value);
};

interface WebGPUComputePassTimestampWrites {
    [Value] static WebGPUComputePassTimestampWrites Obtain();
    void SetQuerySet(WebGPUQuerySet value);
    void SetBeginningOfPassWriteIndex(long value);
    void SetEndOfPassWriteIndex(long value);
};

interface WebGPUColor {
    void WebGPUColor();
    [Value] static WebGPUColor Obtain();
    void SetColor(float r, float g, float b, float a);
    void SetR(float value);
    void SetG(float value);
    void SetB(float value);
    void SetA(float value);
    float GetR();
    float GetG();
    float GetB();
    float GetA();
};

interface WebGPURenderPassColorAttachment {
    void WebGPURenderPassColorAttachment();
    [Value] static WebGPURenderPassColorAttachment Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetView(WebGPUTextureView textureView);
    void SetResolveTarget(WebGPUTextureView textureView);
    void SetLoadOp(WGPULoadOp loadOp);
    void SetStoreOp(WGPUStoreOp storeOp);
    [Value] WebGPUColor GetClearValue();
    void SetDepthSlice(long depthSlice);
};

interface WebGPUSurfaceTexture {
    void WebGPUSurfaceTexture();
    [Value] static WebGPUSurfaceTexture Obtain();
    void GetTexture(WebGPUTexture texture);
    WGPUSurfaceGetCurrentTextureStatus GetStatus();
};

interface WebGPUSurfaceCapabilities {
    void WebGPUSurfaceCapabilities();
    [Value] static WebGPUSurfaceCapabilities Obtain();
    WGPUTextureFormat GetFormats(long index);
};

interface WebGPUSurfaceConfiguration {
    void WebGPUSurfaceConfiguration();
    [Value] static WebGPUSurfaceConfiguration Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetWidth(long width);
    void SetHeight(long height);
    void SetFormat(WGPUTextureFormat format);
    void SetViewFormats(WGPUVectorTextureFormat formats);
    void SetUsage(WGPUTextureUsage usage);
    void SetDevice(WebGPUDevice device);
    void SetPresentMode(WGPUPresentMode presentMode);
    void SetAlphaMode(WGPUCompositeAlphaMode alphaMode);
};

interface WebGPUChainedStruct {
    void SetNext(WebGPUChainedStruct value);
    void SetSType(WGPUSType type);
};

interface WebGPUStringView {
    [Const, Value] IDLString GetString();
};

interface WebGPUOrigin3D {
    void WebGPUOrigin3D();
    [Value] static WebGPUOrigin3D Obtain();
    void Set(long x, long y, long z);
    void SetX(long value);
    void SetY(long value);
    void SetZ(long value);
};

interface WebGPUTexelCopyTextureInfo {
    void WebGPUTexelCopyTextureInfo();
    [Value] static WebGPUTexelCopyTextureInfo Obtain();
    void SetTexture(WebGPUTexture texture);
    void SetMipLevel(long mipLevel);
    [Value] WebGPUOrigin3D GetOrigin();
    void SetAspect(WGPUTextureAspect aspect);
};

interface WebGPUExtent3D {
    void WebGPUExtent3D();
    [Value] static WebGPUExtent3D Obtain();
    void SetWidth(long width);
    void SetHeight(long height);
    void SetDepthOrArrayLayers(long depthOrArrayLayers);
};

interface WebGPUTexelCopyBufferLayout {
    void WebGPUTexelCopyBufferLayout();
    [Value] static WebGPUTexelCopyBufferLayout Obtain();
    void SetOffset(long offset);
    void SetBytesPerRow(long bytesPerRow);
    void SetRowsPerImage(long rowsPerImage);
};

interface WebGPUTexelCopyBufferInfo {
    void WebGPUTexelCopyBufferInfo();
    [Value] static WebGPUTexelCopyBufferInfo Obtain();
    [Value] WebGPUTexelCopyBufferLayout GetLayout();
    [Value] WebGPUBuffer GetBuffer();
    void SetBuffer(WebGPUBuffer buffer);
};

interface WebGPUBindGroupLayoutEntry {
    void WebGPUBindGroupLayoutEntry();
    [Value] static WebGPUBindGroupLayoutEntry Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetBinding(long binding);
    void SetVisibility(WGPUShaderStage visibility);
    void SetBuffer(WebGPUBufferBindingLayout buffer);
    void SetSampler(WebGPUSamplerBindingLayout sampler);
    void SetTexture(WebGPUTextureBindingLayout texture);
    void SetStorageTexture(WebGPUStorageTextureBindingLayout storageTexture);
    [Value] WebGPUBufferBindingLayout GetBuffer();
    [Value] WebGPUSamplerBindingLayout GetSampler();
    [Value] WebGPUStorageTextureBindingLayout GetStorageTexture();
    [Value] WebGPUTextureBindingLayout GetTexture();
};

interface WebGPUBufferBindingLayout {
    void WebGPUBufferBindingLayout();
    [Value] static WebGPUBufferBindingLayout Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetType(WGPUBufferBindingType type);
    void SetHasDynamicOffset(long hasDynamicOffset);
    void SetMinBindingSize(long minBindingSize);
};

interface WebGPUSamplerBindingLayout {
    void WebGPUSamplerBindingLayout();
    [Value] static WebGPUSamplerBindingLayout Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetType(WGPUSamplerBindingType type);
};

interface WebGPUTextureBindingLayout {
    void WebGPUTextureBindingLayout();
    [Value] static WebGPUTextureBindingLayout Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetSampleType(WGPUTextureSampleType sampleType);
    void SetViewDimension(WGPUTextureViewDimension viewDimension);
    void SetMultisampled(long multisampled);
};

interface WebGPUStorageTextureBindingLayout {
    void WebGPUStorageTextureBindingLayout();
    [Value] static WebGPUStorageTextureBindingLayout Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetAccess(WGPUStorageTextureAccess access);
    void SetFormat(WGPUTextureFormat format);
    void SetViewDimension(WGPUTextureViewDimension viewDimension);
};

interface WebGPUBindGroupEntry  {
    void WebGPUBindGroupEntry ();
    [Value] static WebGPUBindGroupEntry Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetBinding(long binding);
    void SetBuffer(WebGPUBuffer buffer);
    void SetOffset(long offset);
    void SetSize(long size);
    void SetSampler(WebGPUSampler sampler);
    void SetTextureView(WebGPUTextureView textureView);
};

interface WebGPUInstanceCapabilities  {
    void WebGPUInstanceCapabilities ();
    [Value] static WebGPUInstanceCapabilities Obtain();

};

interface WebGPURenderPassMaxDrawCount  {
    void WebGPURenderPassMaxDrawCount ();
    [Value] static WebGPURenderPassMaxDrawCount Obtain();
    void SetMaxDrawCount(long maxDrawCount);
    long GetMaxDrawCount();

};

interface WebGPUShaderSourceSPIRV  {
    void WebGPUShaderSourceSPIRV ();
    [Value] static WebGPUShaderSourceSPIRV Obtain();

};

interface WebGPUSupportedWGSLLanguageFeatures  {
    void WebGPUSupportedWGSLLanguageFeatures ();
    [Value] static WebGPUSupportedWGSLLanguageFeatures Obtain();
    long GetFeatureCount();
    WGPUWGSLLanguageFeatureName GetFeatureAt(long index);
};

interface WebGPUCompilationInfo  {
    void WebGPUCompilationInfo ();
    long GetMessageCount();
    [Value] WebGPUCompilationMessage GetMessage(long index);
};

interface WebGPUCompilationMessage  {
    void WebGPUCompilationMessage ();
    [Value] static WebGPUCompilationMessage Obtain();
    [Const, Value] IDLStringView GetMessage();
    WGPUCompilationMessageType GetType();
    long GetLineNum();
    long GetLinePos();
    long GetOffset();
    long GetLength();
};

// ################################### DESCRIPTOR STRUCTS ###################################

interface WebGPURenderBundleDescriptor {
    void WebGPURenderBundleDescriptor();
    [Value] static WebGPURenderBundleDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString label);
};

interface WebGPURenderBundleEncoderDescriptor {
    void WebGPURenderBundleEncoderDescriptor();
    [Value] static WebGPURenderBundleEncoderDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString label);
    void SetColorFormats(WGPUVectorTextureFormat colorFormats);
    void SetDepthStencilFormat(WGPUTextureFormat depthStencilFormat);
    void SetSampleCount(long sampleCount);
    void SetDepthReadOnly(long depthReadOnly);
    void SetStencilReadOnly(long stencilReadOnly);
};

interface WebGPUQuerySetDescriptor {
    void WebGPUQuerySetDescriptor();
    [Value] static WebGPUQuerySetDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString label);
    void SetType(WGPUQueryType type);
    void SetCount(long count);
};

interface WebGPUSamplerDescriptor {
    void WebGPUSamplerDescriptor();
    [Value] static WebGPUSamplerDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString label);
    void SetAddressModeU(WGPUAddressMode addressModeU);
    void SetAddressModeV(WGPUAddressMode addressModeV);
    void SetAddressModeW(WGPUAddressMode addressModeW);
    void SetMagFilter(WGPUFilterMode magFilter);
    void SetMinFilter(WGPUFilterMode minFilter);
    void SetMipmapFilter(WGPUMipmapFilterMode mipmapFilter);
    void SetLodMinClamp(float lodMinClamp);
    void SetLodMaxClamp(float lodMaxClamp);
    void SetCompare(WGPUCompareFunction compare);
    void SetMaxAnisotropy(long maxAnisotropy);
};

interface WebGPUBindGroupLayoutDescriptor {
    void WebGPUBindGroupLayoutDescriptor();
    [Value] static WebGPUBindGroupLayoutDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString label);
    void SetEntries(WGPUVectorBindGroupLayoutEntry entries);
};

interface WebGPUProgrammableStageDescriptor { // Pointer descriptor
//    void WebGPUProgrammableStageDescriptor();
//    [Value] static WebGPUProgrammableStageDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
};

interface WebGPUComputePipelineDescriptor {
    void WebGPUComputePipelineDescriptor();
    [Value] static WebGPUComputePipelineDescriptor Obtain();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
//    void SetLayout(WebGPUPipelineLayout layout);
    [Value] WebGPUProgrammableStageDescriptor GetCompute();
};

interface WebGPUQueueDescriptor {  // Pointer descriptor
//    void WebGPUQueueDescriptor();
//    [Value] static WebGPUQueueDescriptor Obtain();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
};

interface WebGPUShaderModuleDescriptor {
    void WebGPUShaderModuleDescriptor();
    [Value] static WebGPUShaderModuleDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
};

interface WebGPUBindGroupDescriptor {
    void WebGPUBindGroupDescriptor();
    [Value] static WebGPUBindGroupDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
    void SetLayout(WebGPUBindGroupLayout layout);
    void SetEntries(WGPUVectorBindGroupEntry entries);
};

interface WebGPUBufferDescriptor {
    void WebGPUBufferDescriptor();
    [Value] static WebGPUBufferDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString label);
    void SetUsage(WGPUBufferUsage usage);
    void SetSize(long size);
    void SetMappedAtCreation(long mappedAtCreation);
};

interface WebGPUPipelineLayoutDescriptor {
    void WebGPUPipelineLayoutDescriptor();
    [Value] static WebGPUPipelineLayoutDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString label);
    void SetBindGroupLayouts(WGPUVectorBindGroupLayout bindGroupLayouts);
};

interface WebGPUDeviceDescriptor {
    void WebGPUDeviceDescriptor();
    [Value] static WebGPUDeviceDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString label);
    void SetRequiredLimits(WebGPULimits limits);
    void SetRequiredFeatures(WGPUVectorFeatureName features);
    [Value] WebGPUQueueDescriptor GetDefaultQueue();
};

interface WebGPURenderPipelineDescriptor {
    void WebGPURenderPipelineDescriptor();
    [Value] static WebGPURenderPipelineDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
    [Value] WebGPUVertexState GetVertex();
    [Value] WebGPUPrimitiveState GetPrimitive();
    void SetFragment(WebGPUFragmentState fragmentState);
    void SetDepthStencil(WebGPUDepthStencilState depthStencilState);
    [Value] WebGPUMultisampleState GetMultisample();
    void SetLayout(WebGPUPipelineLayout pipelineLayout);
};

interface WebGPUCommandEncoderDescriptor {
    void WebGPUCommandEncoderDescriptor();
    [Value] static WebGPUCommandEncoderDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
};

interface WebGPURenderPassDescriptor {
    void WebGPURenderPassDescriptor();
    [Value] static WebGPURenderPassDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
    void SetColorAttachments(WGPUVectorRenderPassColorAttachment colorAttachments);
    void SetDepthStencilAttachment(WebGPURenderPassDepthStencilAttachment attachment);
    void SetOcclusionQuerySet(WebGPUQuerySet occlusionQuerySet);
    void SetTimestampWrites(WebGPURenderPassTimestampWrites timestampWrites);
};

interface WebGPUCommandBufferDescriptor  {
    void WebGPUCommandBufferDescriptor();
    [Value] static WebGPUCommandBufferDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
};

interface WebGPUComputePassDescriptor {
    void WebGPUComputePassDescriptor();
    [Value] static WebGPUComputePassDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
    void SetTimestampWrites(WebGPUComputePassTimestampWrites timestampWrites);
};

interface WebGPUTextureDescriptor {
    void WebGPUTextureDescriptor();
    [Value] static WebGPUTextureDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
    void SetUsage(WGPUTextureUsage usage);
    void SetDimension(WGPUTextureDimension dimension);
    [Value] WebGPUExtent3D GetSize();
    void SetFormat(WGPUTextureFormat format);
    void SetMipLevelCount(long mipLevelCount);
    void SetSampleCount(long sampleCount);
    void SetViewFormats(WGPUVectorTextureFormat viewFormats);
};

interface WebGPUTextureViewDescriptor {
    void WebGPUTextureViewDescriptor();
    [Value] static WebGPUTextureViewDescriptor Obtain();
    void SetNextInChain(WebGPUChainedStruct chainedStruct);
    void SetLabel([Const] DOMString value);
    void SetFormat(WGPUTextureFormat format);
    void SetDimension(WGPUTextureViewDimension dimension);
    void SetBaseMipLevel(long baseMipLevel);
    void SetMipLevelCount(long mipLevelCount);
    void SetBaseArrayLayer(long baseArrayLayer);
    void SetArrayLayerCount(long arrayLayerCount);
    void SetAspect(WGPUTextureAspect aspect);
    void SetUsage(WGPUTextureUsage usage);
};

// ################################### OPAQUE POINTER ###################################

interface WebGPUSampler {
    void WebGPUSampler();
    void Release();
    void SetLabel([Const] DOMString label);
};

interface WebGPURenderBundleEncoder {
    void WebGPURenderBundleEncoder();
    void Release();
    void SetPipeline(WebGPURenderPipeline renderPipeline);
    void SetLabel([Const] DOMString label);
    void Draw(long vertexCount, long instanceCount, long firstVertex, long firstInstance);
    void DrawIndexed(long indexCount, long instanceCount, long firstIndex, long baseVertex, long firstInstance);
    void DrawIndirect(WebGPUBuffer indirectBuffer, long indirectOffset);
    void DrawIndexedIndirect(WebGPUBuffer indirectBuffer, long indirectOffset);
    void SetBindGroup(long groupIndex, WebGPUBindGroup group, WGPUVectorInt dynamicOffsets);
    void SetVertexBuffer(long slot, WebGPUBuffer buffer, long offset, long size);
    void SetIndexBuffer(WebGPUBuffer buffer, WGPUIndexFormat format, long offset, long size);
    void InsertDebugMarker([Const] DOMString label);
    void PopDebugGroup();
    void PushDebugGroup([Const] DOMString label);
    void Finish(WebGPURenderBundleDescriptor descriptor, WebGPURenderBundle bundle);
};

interface WebGPUTextureView {
    void WebGPUTextureView();
    [Value] static WebGPUTextureView Obtain();
    void Release();
};

interface WebGPUTexture {
    void WebGPUTexture();
    [Value] static WebGPUTexture Obtain();
    void CreateView(WebGPUTextureViewDescriptor textureViewDescriptor, WebGPUTextureView textureView);
    WGPUTextureFormat GetFormat();
    void Release();
    void Destroy();
};

interface WebGPUShaderModule {
    void WebGPUShaderModule();
    [Value] static WebGPUShaderModule Obtain();
    void Release();
};

interface WebGPURenderPipeline {
    void WebGPURenderPipeline();
    void Release();
};

interface WebGPURenderPassEncoder {
    void WebGPURenderPassEncoder();
    [Value] static WebGPURenderPassEncoder Obtain();
    void Release();
    void End();
    void SetPipeline(WebGPURenderPipeline renderPipeline);
    void BeginOcclusionQuery(long queryIndex);
    void Draw(long vertexCount, long instanceCount, long firstVertex, long firstInstance);
    void DrawIndexed(long indexCount, long instanceCount, long firstIndex, long baseVertex, long firstInstance);
    void DrawIndexedIndirect(WebGPUBuffer indirectBuffer, long indirectOffset);
    void DrawIndirect(WebGPUBuffer indirectBuffer, long indirectOffset);
    void EndOcclusionQuery();
    void ExecuteBundles(WGPUVectorRenderBundle bundles);
    void InsertDebugMarker([Const] DOMString value);
    void PopDebugGroup();
    void PushDebugGroup([Const] DOMString value);
    void SetBindGroup(long groupIndex, WebGPUBindGroup group, WGPUVectorInt dynamicOffsets);
    void SetBlendConstant(WebGPUColor color);
    void SetIndexBuffer(WebGPUBuffer buffer, WGPUIndexFormat format, long offset, long size);
    void SetLabel([Const] DOMString value);
    void SetScissorRect(long x, long y, long width, long height);
    void SetStencilReference(long reference);
    void SetVertexBuffer(long slot, WebGPUBuffer buffer, long offset, long size);
    void SetViewport(float x, float y, float width, float height, float minDepth, float maxDepth);
    void AddRef();
};

interface WebGPUQuerySet {
    void WebGPUQuerySet();
    void Destroy();
    long GetCount();
    WGPUQueryType GetType();
    void SetLabel([Const] DOMString value);
    void Release();
    void AddRef();
};

interface WebGPUPipelineLayout {
    void WebGPUPipelineLayout();
    void Release();
    void SetLabel([Const] DOMString value);
};

interface WebGPUInstance {
    boolean IsValid();
    void Release();
    void RequestAdapter(WebGPURequestAdapterOptions options, WGPUCallbackMode mode, RequestAdapterCallback callback);
    WebGPUSurface CreateWebSurface([Const] DOMString canvas);
    WebGPUSurface CreateWindowsSurface(any hwnd);
    WebGPUSurface CreateLinuxSurface(boolean isWayland, any windowOrSurface, any display);
    WebGPUSurface CreateMacSurface(any metalLayer);
    WebGPUSurface CreateAndroidSurface(WGPUAndroidWindow surface);
    void ProcessEvents();
};

interface WebGPUDevice {
    void Release();
    void CreateBindGroup(WebGPUBindGroupDescriptor descriptor, WebGPUBindGroup valueOut);
    void CreateBindGroupLayout(WebGPUBindGroupLayoutDescriptor descriptor, WebGPUBindGroupLayout valueOut);
    void CreateBuffer(WebGPUBufferDescriptor descriptor, WebGPUBuffer valueOut);
    void CreateCommandEncoder(WebGPUCommandEncoderDescriptor descriptor, WebGPUCommandEncoder valueOut);
    void CreateComputePipeline(WebGPUComputePipelineDescriptor descriptor, WebGPUComputePipeline valueOut);
    void CreatePipelineLayout(WebGPUPipelineLayoutDescriptor descriptor, WebGPUPipelineLayout valueOut);
    void CreateQuerySet(WebGPUQuerySetDescriptor descriptor, WebGPUQuerySet valueOut);
    void CreateRenderBundleEncoder(WebGPURenderBundleEncoderDescriptor descriptor, WebGPURenderBundleEncoder valueOut);
    void CreateRenderPipeline(WebGPURenderPipelineDescriptor descriptor, WebGPURenderPipeline valueOut);
    void CreateSampler(WebGPUSamplerDescriptor descriptor, WebGPUSampler valueOut);
    void CreateShaderModule(WebGPUShaderModuleDescriptor descriptor, WebGPUShaderModule shaderModule);
    void CreateTexture(WebGPUTextureDescriptor descriptor, WebGPUTexture valueOut);
    void Destroy();

    void GetFeatures(WebGPUSupportedFeatures features);
    boolean HasFeature(WGPUFeatureName feature);
    void GetLimits(WebGPULimits limits);
    [Value] WebGPUQueue GetQueue();
};

interface WebGPUComputePassEncoder {
    void WebGPUComputePassEncoder();
    [Value] static WebGPUComputePassEncoder Obtain();
    void Release();
    void SetDispatchWorkgroups(long workgroupCountX, long workgroupCountY, long workgroupCountZ);
    void DispatchWorkgroupsIndirect(WebGPUBuffer indirectBuffer, long indirectOffset);
    void End();
    void InsertDebugMarker([Const] DOMString value);
    void PopDebugGroup();
    void PushDebugGroup([Const] DOMString groupLabel);
    void SetBindGroup(long groupIndex, WebGPUBindGroup group, WGPUVectorInt offsets);
    void SetLabel([Const] DOMString label);
    void SetPipeline(WebGPUComputePipeline pipeline);
};

interface WebGPUCommandBuffer {
    void WebGPUCommandBuffer();
    [Value] static WebGPUCommandBuffer Obtain();
    void Release();
};

interface WebGPUCommandEncoder {
    void WebGPUCommandEncoder();
    [Value] static WebGPUCommandEncoder Obtain();
    void Release();
    void BeginComputePass(WebGPUComputePassDescriptor descriptor, WebGPUComputePassEncoder computePassEncoder);
    void BeginRenderPass(WebGPURenderPassDescriptor renderPassDescriptor, WebGPURenderPassEncoder renderPassEncoder);
    void ClearBuffer(WebGPUBuffer buffer, long offset, long size);
    void CopyBufferToBuffer(WebGPUBuffer source, long sourceOffset, WebGPUBuffer destination, long destinationOffset, long size);
    void CopyBufferToTexture(WebGPUTexelCopyBufferInfo source, WebGPUTexelCopyTextureInfo destination, WebGPUExtent3D copySize);
    void TextureToBuffer(WebGPUTexelCopyTextureInfo source, WebGPUTexelCopyBufferInfo destination, WebGPUExtent3D copySize);
    void CopyTextureToTexture(WebGPUTexelCopyTextureInfo source, WebGPUTexelCopyTextureInfo destination, WebGPUExtent3D copySize);
    void Finish(WebGPUCommandBufferDescriptor descriptor, WebGPUCommandBuffer commandBuffer);
    void InsertDebugMarker([Const] DOMString value);
    void PopDebugGroup();
    void PushDebugGroup([Const] DOMString value);
    void ResolveQuerySet(WebGPUQuerySet querySet, long firstQuery, long queryCount, WebGPUBuffer destination, long destinationOffset);
    void SetLabel([Const] DOMString value);
    void WriteTimestamp(WebGPUQuerySet querySet, long queryIndex);
};

interface WebGPUBuffer {
    void WebGPUBuffer();
    void Release();
    void Destroy();
    void MapAsync(WGPUMapMode mode, long offset, long size, WGPUCallbackMode callbackMode, BufferMapCallback callback);
    [Value] WGPUByteBuffer GetConstMappedRange(long offset, long size);
    void Unmap();
    long GetSize();
    WGPUBufferUsage GetUsage();
};

interface WebGPUBindGroup {
    void WebGPUBindGroup();
    void Release();
    void SetLabel([Const] DOMString value);
};

interface WebGPUBindGroupLayout {
    void WebGPUBindGroupLayout();
    void Release();
    void SetLabel([Const] DOMString value);
};

interface WebGPUComputePipeline {
    void Release();
    void SetLabel([Const] DOMString value);
    [Value] WebGPUBindGroupLayout GetBindGroupLayout(long groupIndex);
};

interface WebGPURenderBundle {
    void Release();
    void SetLabel([Const] DOMString value);
};

interface WebGPUAdapter {
    void Release();
    void RequestDevice(WebGPUDeviceDescriptor options, WGPUCallbackMode mode, RequestDeviceCallback callback, UncapturedErrorCallback errorCallback);
    boolean GetInfo(WebGPUAdapterInfo adapterInfo);
    boolean HasFeature(WGPUFeatureName featureName);
};

interface WebGPUSurface {
    void Unconfigure();
    void Release();
    void Configure(WebGPUSurfaceConfiguration config);
    void GetCapabilities(WebGPUAdapter adapter, WebGPUSurfaceCapabilities surfaceCapabilities);
    void GetCurrentTexture(WebGPUSurfaceTexture surfaceTexture);
    void Present();
};

interface WebGPUQueue {
    void SetLabel([Const] DOMString value);
    void Submit(long commandCount, WebGPUCommandBuffer commandBuffer);
    void Release();
    void WriteBuffer(WebGPUBuffer buffer, long bufferOffset, WGPUByteBuffer bytes);
    void WriteTexture(WebGPUTexelCopyTextureInfo destination, WGPUByteBuffer bytes, WebGPUTexelCopyBufferLayout dataLayout, WebGPUExtent3D writeSize);
};

// ################################### ENUMS ###################################

enum WGPUBufferUsage {
    "WGPUBufferUsage_None",            //[-RENAME=None]
    "WGPUBufferUsage_MapRead",         //[-RENAME=MapRead]
    "WGPUBufferUsage_MapWrite",        //[-RENAME=MapWrite]
    "WGPUBufferUsage_CopySrc",         //[-RENAME=CopySrc]
    "WGPUBufferUsage_CopyDst",         //[-RENAME=CopyDst]
    "WGPUBufferUsage_Index",           //[-RENAME=Index]
    "WGPUBufferUsage_Vertex",          //[-RENAME=Vertex]
    "WGPUBufferUsage_Uniform",         //[-RENAME=Uniform]
    "WGPUBufferUsage_Storage",         //[-RENAME=Storage]
    "WGPUBufferUsage_Indirect",        //[-RENAME=Indirect]
    "WGPUBufferUsage_QueryResolve"     //[-RENAME=QueryResolve]
};

enum WGPUColorWriteMask {
    "WGPUColorWriteMask_None",         //[-RENAME=None]
    "WGPUColorWriteMask_Red",          //[-RENAME=Red]
    "WGPUColorWriteMask_Green",        //[-RENAME=Green]
    "WGPUColorWriteMask_Blue",         //[-RENAME=Blue]
    "WGPUColorWriteMask_Alpha",        //[-RENAME=Alpha]
    "WGPUColorWriteMask_All"           //[-RENAME=All]
};

enum WGPUMapMode {
    "WGPUMapMode_None",                //[-RENAME=None]
    "WGPUMapMode_Read",                //[-RENAME=Read]
    "WGPUMapMode_Write"                //[-RENAME=Write]
};

enum WGPUShaderStage {
    "WGPUShaderStage_None",            //[-RENAME=None]
    "WGPUShaderStage_Vertex",          //[-RENAME=Vertex]
    "WGPUShaderStage_Fragment",        //[-RENAME=Fragment]
    "WGPUShaderStage_Compute"          //[-RENAME=Compute]
};

enum WGPUTextureUsage {
    "WGPUTextureUsage_None",            //[-RENAME=None]
    "WGPUTextureUsage_CopySrc",         //[-RENAME=CopySrc]
    "WGPUTextureUsage_CopyDst",         //[-RENAME=CopyDst]
    "WGPUTextureUsage_TextureBinding",  //[-RENAME=TextureBinding]
    "WGPUTextureUsage_StorageBinding",  //[-RENAME=StorageBinding]
    "WGPUTextureUsage_RenderAttachment" //[-RENAME=RenderAttachment]
};

enum WGPUAdapterType {
    "WGPUAdapterType_DiscreteGPU",     //[-RENAME=DiscreteGPU]
    "WGPUAdapterType_IntegratedGPU",   //[-RENAME=IntegratedGPU]
    "WGPUAdapterType_CPU",             //[-RENAME=CPU]
    "WGPUAdapterType_Unknown",         //[-RENAME=Unknown]
    "WGPUAdapterType_Force32"          //[-RENAME=Force32]
};

enum WGPUAddressMode {
    "WGPUAddressMode_Undefined",       //[-RENAME=Undefined]
    "WGPUAddressMode_ClampToEdge",     //[-RENAME=ClampToEdge]
    "WGPUAddressMode_Repeat",          //[-RENAME=Repeat]
    "WGPUAddressMode_MirrorRepeat",    //[-RENAME=MirrorRepeat]
    "WGPUAddressMode_Force32"          //[-RENAME=Force32]
};

enum WGPUBackendType {
    "WGPUBackendType_Undefined",       //[-RENAME=Undefined]
    "WGPUBackendType_Null",            //[-RENAME=Null]
    "WGPUBackendType_WebGPU",          //[-RENAME=WebGPU]
    "WGPUBackendType_D3D11",           //[-RENAME=D3D11]
    "WGPUBackendType_D3D12",           //[-RENAME=D3D12]
    "WGPUBackendType_Metal",           //[-RENAME=Metal]
    "WGPUBackendType_Vulkan",          //[-RENAME=Vulkan]
    "WGPUBackendType_OpenGL",          //[-RENAME=OpenGL]
    "WGPUBackendType_OpenGLES",        //[-RENAME=OpenGLES]
    "WGPUBackendType_Force32"          //[-RENAME=Force32]
};

enum WGPUBlendFactor {
    "WGPUBlendFactor_Undefined",         //[-RENAME=Undefined]
    "WGPUBlendFactor_Zero",              //[-RENAME=Zero]
    "WGPUBlendFactor_One",               //[-RENAME=One]
    "WGPUBlendFactor_Src",               //[-RENAME=Src]
    "WGPUBlendFactor_OneMinusSrc",       //[-RENAME=OneMinusSrc]
    "WGPUBlendFactor_SrcAlpha",          //[-RENAME=SrcAlpha]
    "WGPUBlendFactor_OneMinusSrcAlpha",  //[-RENAME=OneMinusSrcAlpha]
    "WGPUBlendFactor_Dst",               //[-RENAME=Dst]
    "WGPUBlendFactor_OneMinusDst",       //[-RENAME=OneMinusDst]
    "WGPUBlendFactor_DstAlpha",          //[-RENAME=DstAlpha]
    "WGPUBlendFactor_OneMinusDstAlpha",  //[-RENAME=OneMinusDstAlpha]
    "WGPUBlendFactor_SrcAlphaSaturated", //[-RENAME=SrcAlphaSaturated]
    "WGPUBlendFactor_Constant",          //[-RENAME=Constant]
    "WGPUBlendFactor_OneMinusConstant",  //[-RENAME=OneMinusConstant]
    "WGPUBlendFactor_Src1",              //[-RENAME=Src1]
    "WGPUBlendFactor_OneMinusSrc1",      //[-RENAME=OneMinusSrc1]
    "WGPUBlendFactor_Src1Alpha",         //[-RENAME=Src1Alpha]
    "WGPUBlendFactor_OneMinusSrc1Alpha", //[-RENAME=OneMinusSrc1Alpha]
    "WGPUBlendFactor_Force32"            //[-RENAME=Force32]
};

enum WGPUBlendOperation {
    "WGPUBlendOperation_Undefined",         //[-RENAME=Undefined]
    "WGPUBlendOperation_Add",               //[-RENAME=Add]
    "WGPUBlendOperation_Subtract",          //[-RENAME=Subtract]
    "WGPUBlendOperation_ReverseSubtract",   //[-RENAME=ReverseSubtract]
    "WGPUBlendOperation_Min",               //[-RENAME=Min]
    "WGPUBlendOperation_Max",               //[-RENAME=Max]
    "WGPUBlendOperation_Force32"            //[-RENAME=Force32]
};

enum WGPUBufferBindingType {
    "WGPUBufferBindingType_BindingNotUsed",  //[-RENAME=BindingNotUsed]
    "WGPUBufferBindingType_Undefined",       //[-RENAME=Undefined]
    "WGPUBufferBindingType_Uniform",         //[-RENAME=Uniform]
    "WGPUBufferBindingType_Storage",         //[-RENAME=Storage]
    "WGPUBufferBindingType_ReadOnlyStorage", //[-RENAME=ReadOnlyStorage]
    "WGPUBufferBindingType_Force32"          //[-RENAME=Force32]
};

enum WGPUBufferMapState {
    "WGPUBufferMapState_Unmapped",     //[-RENAME=Unmapped]
    "WGPUBufferMapState_Pending",      //[-RENAME=Pending]
    "WGPUBufferMapState_Mapped",       //[-RENAME=Mapped]
    "WGPUBufferMapState_Force32"       //[-RENAME=Force32]
};

enum WGPUCallbackMode {
    "WGPUCallbackMode_WaitAnyOnly",         //[-RENAME=WaitAnyOnly]
    "WGPUCallbackMode_AllowProcessEvents",  //[-RENAME=AllowProcessEvents]
    "WGPUCallbackMode_AllowSpontaneous",    //[-RENAME=AllowSpontaneous]
    "WGPUCallbackMode_Force32"              //[-RENAME=Force32]
};

enum WGPUCompareFunction {
    "WGPUCompareFunction_Undefined",    //[-RENAME=Undefined]
    "WGPUCompareFunction_Never",        //[-RENAME=Never]
    "WGPUCompareFunction_Less",         //[-RENAME=Less]
    "WGPUCompareFunction_Equal",        //[-RENAME=Equal]
    "WGPUCompareFunction_LessEqual",    //[-RENAME=LessEqual]
    "WGPUCompareFunction_Greater",      //[-RENAME=Greater]
    "WGPUCompareFunction_NotEqual",     //[-RENAME=NotEqual]
    "WGPUCompareFunction_GreaterEqual", //[-RENAME=GreaterEqual]
    "WGPUCompareFunction_Always",       //[-RENAME=Always]
    "WGPUCompareFunction_Force32"       //[-RENAME=Force32]
};

enum WGPUCompilationInfoRequestStatus {
    "WGPUCompilationInfoRequestStatus_Success",             //[-RENAME=Success]
    // "WGPUCompilationInfoRequestStatus_CallbackCancelled", // TODO missing in wgpu-native header
    "WGPUCompilationInfoRequestStatus_Force32"              //[-RENAME=Force32]
};

enum WGPUCompilationMessageType {
    "WGPUCompilationMessageType_Error",     //[-RENAME=Error]
    "WGPUCompilationMessageType_Warning",   //[-RENAME=Warning]
    "WGPUCompilationMessageType_Info",      //[-RENAME=Info]
    "WGPUCompilationMessageType_Force32"    //[-RENAME=Force32]
};

enum WGPUCompositeAlphaMode {
    "WGPUCompositeAlphaMode_Auto",              //[-RENAME=Auto]
    "WGPUCompositeAlphaMode_Opaque",            //[-RENAME=Opaque]
    "WGPUCompositeAlphaMode_Premultiplied",     //[-RENAME=Premultiplied]
    "WGPUCompositeAlphaMode_Unpremultiplied",   //[-RENAME=Unpremultiplied]
    "WGPUCompositeAlphaMode_Inherit",           //[-RENAME=Inherit]
    "WGPUCompositeAlphaMode_Force32"            //[-RENAME=Force32]
};

enum WGPUCreatePipelineAsyncStatus {
    "WGPUCreatePipelineAsyncStatus_Success",            //[-RENAME=Success]
    // "WGPUCreatePipelineAsyncStatus_CallbackCancelled", // TODO missing in wgpu-native header
    "WGPUCreatePipelineAsyncStatus_ValidationError",    //[-RENAME=ValidationError]
    "WGPUCreatePipelineAsyncStatus_InternalError",      //[-RENAME=InternalError]
    "WGPUCreatePipelineAsyncStatus_Force32"             //[-RENAME=Force32]
};

enum WGPUCullMode {
    "WGPUCullMode_Undefined",          //[-RENAME=Undefined]
    "WGPUCullMode_None",               //[-RENAME=None]
    "WGPUCullMode_Front",              //[-RENAME=Front]
    "WGPUCullMode_Back",               //[-RENAME=Back]
    "WGPUCullMode_Force32"             //[-RENAME=Force32]
};

enum WGPUDeviceLostReason {
    "WGPUDeviceLostReason_Unknown",             //[-RENAME=Unknown]
    "WGPUDeviceLostReason_Destroyed",           //[-RENAME=Destroyed]
    // "WGPUDeviceLostReason_CallbackCancelled", // TODO missing in wgpu-native header
    "WGPUDeviceLostReason_FailedCreation",      //[-RENAME=FailedCreation]
    "WGPUDeviceLostReason_Force32"              //[-RENAME=Force32]
};

enum WGPUErrorFilter {
    "WGPUErrorFilter_Validation",      //[-RENAME=Validation]
    "WGPUErrorFilter_OutOfMemory",     //[-RENAME=OutOfMemory]
    "WGPUErrorFilter_Internal",        //[-RENAME=Internal]
    "WGPUErrorFilter_Force32"          //[-RENAME=Force32]
};

enum WGPUErrorType {
    "WGPUErrorType_NoError",           //[-RENAME=NoError]
    "WGPUErrorType_Validation",        //[-RENAME=Validation]
    "WGPUErrorType_OutOfMemory",       //[-RENAME=OutOfMemory]
    "WGPUErrorType_Internal",          //[-RENAME=Internal]
    "WGPUErrorType_Unknown",           //[-RENAME=Unknown]
    "WGPUErrorType_Force32"            //[-RENAME=Force32]
};

enum WGPUFeatureLevel {
    // "WGPUFeatureLevel_Undefined", // TODO missing in wgpu-native header
    "WGPUFeatureLevel_Compatibility",  //[-RENAME=Compatibility]
    "WGPUFeatureLevel_Core",           //[-RENAME=Core]
    "WGPUFeatureLevel_Force32"         //[-RENAME=Force32]
};

enum WGPUFeatureName {
    "WGPUFeatureName_DepthClipControl",                 //[-RENAME=DepthClipControl]
    "WGPUFeatureName_Depth32FloatStencil8",             //[-RENAME=Depth32FloatStencil8]
    "WGPUFeatureName_TimestampQuery",                   //[-RENAME=TimestampQuery]
    "WGPUFeatureName_TextureCompressionBC",             //[-RENAME=TextureCompressionBC]
    "WGPUFeatureName_TextureCompressionBCSliced3D",     //[-RENAME=TextureCompressionBCSliced3D]
    "WGPUFeatureName_TextureCompressionETC2",           //[-RENAME=TextureCompressionETC2]
    "WGPUFeatureName_TextureCompressionASTC",           //[-RENAME=TextureCompressionASTC]
    "WGPUFeatureName_TextureCompressionASTCSliced3D",   //[-RENAME=TextureCompressionASTCSliced3D]
    "WGPUFeatureName_IndirectFirstInstance",            //[-RENAME=IndirectFirstInstance]
    "WGPUFeatureName_ShaderF16",                        //[-RENAME=ShaderF16]
    "WGPUFeatureName_RG11B10UfloatRenderable",          //[-RENAME=RG11B10UfloatRenderable]
    "WGPUFeatureName_BGRA8UnormStorage",                //[-RENAME=BGRA8UnormStorage]
    "WGPUFeatureName_Float32Filterable",                //[-RENAME=Float32Filterable]
    "WGPUFeatureName_Float32Blendable",                 //[-RENAME=Float32Blendable]
    "WGPUFeatureName_ClipDistances",                    //[-RENAME=ClipDistances]
    "WGPUFeatureName_DualSourceBlending",               //[-RENAME=DualSourceBlending]
    // "WGPUFeatureName_Subgroups",  // TODO missing in wgpu-native header
    // "WGPUFeatureName_CoreFeaturesAndLimits",  // TODO missing in wgpu-native header
    // "WGPUFeatureName_Unorm16TextureFormats",  // TODO missing in wgpu-native header
    // "WGPUFeatureName_Snorm16TextureFormats",  // TODO missing in wgpu-native header
    // "WGPUFeatureName_MultiDrawIndirect",      // TODO missing in wgpu-native header
    "WGPUFeatureName_Force32"          //[-RENAME=Force32]
};

enum WGPUFilterMode {
    "WGPUFilterMode_Undefined",        //[-RENAME=Undefined]
    "WGPUFilterMode_Nearest",          //[-RENAME=Nearest]
    "WGPUFilterMode_Linear",           //[-RENAME=Linear]
    "WGPUFilterMode_Force32"           //[-RENAME=Force32]
};

enum WGPUFrontFace {
    "WGPUFrontFace_Undefined",         //[-RENAME=Undefined]
    "WGPUFrontFace_CCW",               //[-RENAME=CCW]
    "WGPUFrontFace_CW",                //[-RENAME=CW]
    "WGPUFrontFace_Force32"            //[-RENAME=Force32]
};

enum WGPUIndexFormat {
    "WGPUIndexFormat_Undefined",       //[-RENAME=Undefined]
    "WGPUIndexFormat_Uint16",          //[-RENAME=Uint16]
    "WGPUIndexFormat_Uint32",          //[-RENAME=Uint32]
    "WGPUIndexFormat_Force32"          //[-RENAME=Force32]
};

enum WGPULoadOp {
    "WGPULoadOp_Undefined",            //[-RENAME=Undefined]
    "WGPULoadOp_Load",                 //[-RENAME=Load]
    "WGPULoadOp_Clear",                //[-RENAME=Clear]
    "WGPULoadOp_Force32"               //[-RENAME=Force32]
};

enum WGPUMapAsyncStatus {
    "WGPUMapAsyncStatus_Success",      //[-RENAME=Success]
    // "WGPUMapAsyncStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    "WGPUMapAsyncStatus_Error",        //[-RENAME=Error]
    "WGPUMapAsyncStatus_Aborted",      //[-RENAME=Aborted]
    "WGPUMapAsyncStatus_Force32"       //[-RENAME=Force32]
};

enum WGPUMipmapFilterMode {
    "WGPUMipmapFilterMode_Undefined",  //[-RENAME=Undefined]
    "WGPUMipmapFilterMode_Nearest",    //[-RENAME=Nearest]
    "WGPUMipmapFilterMode_Linear",     //[-RENAME=Linear]
    "WGPUMipmapFilterMode_Force32"     //[-RENAME=Force32]
};

enum WGPUOptionalBool {
    "WGPUOptionalBool_False",          //[-RENAME=False]
    "WGPUOptionalBool_True",           //[-RENAME=True]
    "WGPUOptionalBool_Undefined",      //[-RENAME=Undefined]
    "WGPUOptionalBool_Force32"         //[-RENAME=Force32]
};

enum WGPUPopErrorScopeStatus {
    "WGPUPopErrorScopeStatus_Success",      //[-RENAME=Success]
    // "WGPUPopErrorScopeStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    // "WGPUPopErrorScopeStatus_Error",            // TODO missing in wgpu-native header
    "WGPUPopErrorScopeStatus_Force32"       //[-RENAME=Force32]
};

enum WGPUPowerPreference {
    "WGPUPowerPreference_Undefined",        //[-RENAME=Undefined]
    "WGPUPowerPreference_LowPower",         //[-RENAME=LowPower]
    "WGPUPowerPreference_HighPerformance",  //[-RENAME=HighPerformance]
    "WGPUPowerPreference_Force32"           //[-RENAME=Force32]
};

// enum WGPUPredefinedColorSpace {    // TODO missing in wgpu-native header
//     "WGPUPredefinedColorSpace_SRGB", //[-RENAME=SRGB]
//     "WGPUPredefinedColorSpace_DisplayP3", //[-RENAME=DisplayP3]
//     "WGPUPredefinedColorSpace_Force32" //[-RENAME=Force32]
// };

enum WGPUPresentMode {
    "WGPUPresentMode_Undefined",       //[-RENAME=Undefined]
    "WGPUPresentMode_Fifo",            //[-RENAME=Fifo]
    "WGPUPresentMode_FifoRelaxed",     //[-RENAME=FifoRelaxed]
    "WGPUPresentMode_Immediate",       //[-RENAME=Immediate]
    "WGPUPresentMode_Mailbox",         //[-RENAME=Mailbox]
    "WGPUPresentMode_Force32"          //[-RENAME=Force32]
};

enum WGPUPrimitiveTopology {
    "WGPUPrimitiveTopology_Undefined",      //[-RENAME=Undefined]
    "WGPUPrimitiveTopology_PointList",      //[-RENAME=PointList]
    "WGPUPrimitiveTopology_LineList",       //[-RENAME=LineList]
    "WGPUPrimitiveTopology_LineStrip",      //[-RENAME=LineStrip]
    "WGPUPrimitiveTopology_TriangleList",   //[-RENAME=TriangleList]
    "WGPUPrimitiveTopology_TriangleStrip",  //[-RENAME=TriangleStrip]
    "WGPUPrimitiveTopology_Force32"         //[-RENAME=Force32]
};

enum WGPUQueryType {
    "WGPUQueryType_Occlusion",         //[-RENAME=Occlusion]
    "WGPUQueryType_Timestamp",         //[-RENAME=Timestamp]
    "WGPUQueryType_Force32"            //[-RENAME=Force32]
};

enum WGPUQueueWorkDoneStatus {
    "WGPUQueueWorkDoneStatus_Success", //[-RENAME=Success]
    // "WGPUQueueWorkDoneStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    "WGPUQueueWorkDoneStatus_Error",   //[-RENAME=Error]
    "WGPUQueueWorkDoneStatus_Force32"  //[-RENAME=Force32]
};

enum WGPURequestAdapterStatus {
    "WGPURequestAdapterStatus_Success",     //[-RENAME=Success]
    // "WGPURequestAdapterStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    "WGPURequestAdapterStatus_Unavailable", //[-RENAME=Unavailable]
    "WGPURequestAdapterStatus_Error",       //[-RENAME=Error]
    "WGPURequestAdapterStatus_Force32"      //[-RENAME=Force32]
};

enum WGPURequestDeviceStatus {
    "WGPURequestDeviceStatus_Success", //[-RENAME=Success]
    // "WGPURequestDeviceStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    "WGPURequestDeviceStatus_Error",   //[-RENAME=Error]
    "WGPURequestDeviceStatus_Force32"  //[-RENAME=Force32]
};

enum WGPUSamplerBindingType {
    "WGPUSamplerBindingType_BindingNotUsed",    //[-RENAME=BindingNotUsed]
    "WGPUSamplerBindingType_Undefined",         //[-RENAME=Undefined]
    "WGPUSamplerBindingType_Filtering",         //[-RENAME=Filtering]
    "WGPUSamplerBindingType_NonFiltering",      //[-RENAME=NonFiltering]
    "WGPUSamplerBindingType_Comparison",        //[-RENAME=Comparison]
    "WGPUSamplerBindingType_Force32"            //[-RENAME=Force32]
};

enum WGPUStatus {
    "WGPUStatus_Success",              //[-RENAME=Success]
    "WGPUStatus_Error",                //[-RENAME=Error]
    "WGPUStatus_Force32"               //[-RENAME=Force32]
};

enum WGPUStencilOperation {
    "WGPUStencilOperation_Undefined",       //[-RENAME=Undefined]
    "WGPUStencilOperation_Keep",            //[-RENAME=Keep]
    "WGPUStencilOperation_Zero",            //[-RENAME=Zero]
    "WGPUStencilOperation_Replace",         //[-RENAME=Replace]
    "WGPUStencilOperation_Invert",          //[-RENAME=Invert]
    "WGPUStencilOperation_IncrementClamp",  //[-RENAME=IncrementClamp]
    "WGPUStencilOperation_DecrementClamp",  //[-RENAME=DecrementClamp]
    "WGPUStencilOperation_IncrementWrap",   //[-RENAME=IncrementWrap]
    "WGPUStencilOperation_DecrementWrap",   //[-RENAME=DecrementWrap]
    "WGPUStencilOperation_Force32"          //[-RENAME=Force32]
};

enum WGPUStorageTextureAccess {
    "WGPUStorageTextureAccess_BindingNotUsed",  //[-RENAME=BindingNotUsed]
    "WGPUStorageTextureAccess_Undefined",       //[-RENAME=Undefined]
    "WGPUStorageTextureAccess_WriteOnly",       //[-RENAME=WriteOnly]
    "WGPUStorageTextureAccess_ReadOnly",        //[-RENAME=ReadOnly]
    "WGPUStorageTextureAccess_ReadWrite",       //[-RENAME=ReadWrite]
    "WGPUStorageTextureAccess_Force32"          //[-RENAME=Force32]
};

enum WGPUStoreOp {
    "WGPUStoreOp_Undefined",           //[-RENAME=Undefined]
    "WGPUStoreOp_Store",               //[-RENAME=Store]
    "WGPUStoreOp_Discard",             //[-RENAME=Discard]
    "WGPUStoreOp_Force32"              //[-RENAME=Force32]
};

enum WGPUSType {
    "WGPUSType_ShaderSourceSPIRV",                  //[-RENAME=ShaderSourceSPIRV]
    "WGPUSType_ShaderSourceWGSL",                   //[-RENAME=ShaderSourceWGSL]
    "WGPUSType_RenderPassMaxDrawCount",             //[-RENAME=RenderPassMaxDrawCount]
    "WGPUSType_SurfaceSourceMetalLayer",            //[-RENAME=SurfaceSourceMetalLayer]
    "WGPUSType_SurfaceSourceWindowsHWND",           //[-RENAME=SurfaceSourceWindowsHWND]
    "WGPUSType_SurfaceSourceXlibWindow",            //[-RENAME=SurfaceSourceXlibWindow]
    "WGPUSType_SurfaceSourceWaylandSurface",        //[-RENAME=SurfaceSourceWaylandSurface]
    "WGPUSType_SurfaceSourceAndroidNativeWindow",   //[-RENAME=SurfaceSourceAndroidNativeWindow]
    "WGPUSType_SurfaceSourceXCBWindow",             //[-RENAME=SurfaceSourceXCBWindow]
    // "WGPUSType_SurfaceColorManagement",    // TODO missing in wgpu-native header
    // "WGPUSType_RequestAdapterWebXROptions", // TODO missing in wgpu-native header
    // "WGPUSType_AdapterPropertiesSubgroups", // TODO missing in wgpu-native header
    // "WGPUSType_BindGroupLayoutEntryArraySize", // TODO missing in wgpu-native header
    // "WGPUSType_TextureBindingViewDimensionDescriptor",   // TODO missing in wgpu-native header
    // "WGPUSType_EmscriptenSurfaceSourceCanvasHTMLSelector",  // TODO missing in wgpu-native header
    // "WGPUSType_DawnCompilationMessageUtf16",  // TODO missing in wgpu-native header
    "WGPUSType_Force32"                             //[-RENAME=Force32]
};

// enum WGPUSubgroupMatrixComponentType {     // TODO missing in wgpu-native header
//     "WGPUSubgroupMatrixComponentType_F32", //[-RENAME=F32]
//     "WGPUSubgroupMatrixComponentType_F16", //[-RENAME=F16]
//     "WGPUSubgroupMatrixComponentType_U32", //[-RENAME=U32]
//     "WGPUSubgroupMatrixComponentType_I32", //[-RENAME=I32]
//     "WGPUSubgroupMatrixComponentType_Force32" //[-RENAME=Force32]
// };

enum WGPUSurfaceGetCurrentTextureStatus {
    "WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal",    //[-RENAME=SuccessOptimal]
    "WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal", //[-RENAME=SuccessSuboptimal]
    "WGPUSurfaceGetCurrentTextureStatus_Timeout",           //[-RENAME=Timeout]
    "WGPUSurfaceGetCurrentTextureStatus_Outdated",          //[-RENAME=Outdated]
    "WGPUSurfaceGetCurrentTextureStatus_Lost",              //[-RENAME=Lost]
    "WGPUSurfaceGetCurrentTextureStatus_Error",             //[-RENAME=Error]
    "WGPUSurfaceGetCurrentTextureStatus_Force32"            //[-RENAME=Force32]
};

enum WGPUTextureAspect {
    "WGPUTextureAspect_Undefined",     //[-RENAME=Undefined]
    "WGPUTextureAspect_All",           //[-RENAME=All]
    "WGPUTextureAspect_StencilOnly",   //[-RENAME=StencilOnly]
    "WGPUTextureAspect_DepthOnly",     //[-RENAME=DepthOnly]
    "WGPUTextureAspect_Force32"        //[-RENAME=Force32]
};

enum WGPUTextureDimension {
    "WGPUTextureDimension_Undefined",  //[-RENAME=Undefined]
    "WGPUTextureDimension_1D",         //[-RENAME=_1D]
    "WGPUTextureDimension_2D",         //[-RENAME=_2D]
    "WGPUTextureDimension_3D",         //[-RENAME=_3D]
    "WGPUTextureDimension_Force32"     //[-RENAME=Force32]
};

enum WGPUTextureFormat {
    "WGPUTextureFormat_Undefined",     //[-RENAME=Undefined]
    "WGPUTextureFormat_R8Unorm",       //[-RENAME=R8Unorm]
    "WGPUTextureFormat_R8Snorm",       //[-RENAME=R8Snorm]
    "WGPUTextureFormat_R8Uint",        //[-RENAME=R8Uint]
    "WGPUTextureFormat_R8Sint",        //[-RENAME=R8Sint]
    "WGPUTextureFormat_R16Uint",       //[-RENAME=R16Uint]
    "WGPUTextureFormat_R16Sint",       //[-RENAME=R16Sint]
    "WGPUTextureFormat_R16Float",      //[-RENAME=R16Float]
    "WGPUTextureFormat_RG8Unorm",      //[-RENAME=RG8Unorm]
    "WGPUTextureFormat_RG8Snorm",      //[-RENAME=RG8Snorm]
    "WGPUTextureFormat_RG8Uint",       //[-RENAME=RG8Uint]
    "WGPUTextureFormat_RG8Sint",       //[-RENAME=RG8Sint]
    "WGPUTextureFormat_R32Float",      //[-RENAME=R32Float]
    "WGPUTextureFormat_R32Uint",       //[-RENAME=R32Uint]
    "WGPUTextureFormat_R32Sint",       //[-RENAME=R32Sint]
    "WGPUTextureFormat_RG16Uint",      //[-RENAME=RG16Uint]
    "WGPUTextureFormat_RG16Sint",      //[-RENAME=RG16Sint]
    "WGPUTextureFormat_RG16Float",     //[-RENAME=RG16Float]
    "WGPUTextureFormat_RGBA8Unorm",    //[-RENAME=RGBA8Unorm]
    "WGPUTextureFormat_RGBA8UnormSrgb", //[-RENAME=RGBA8UnormSrgb]
    "WGPUTextureFormat_RGBA8Snorm",    //[-RENAME=RGBA8Snorm]
    "WGPUTextureFormat_RGBA8Uint",     //[-RENAME=RGBA8Uint]
    "WGPUTextureFormat_RGBA8Sint",     //[-RENAME=RGBA8Sint]
    "WGPUTextureFormat_BGRA8Unorm",    //[-RENAME=BGRA8Unorm]
    "WGPUTextureFormat_BGRA8UnormSrgb", //[-RENAME=BGRA8UnormSrgb]
    "WGPUTextureFormat_RGB10A2Uint",   //[-RENAME=RGB10A2Uint]
    "WGPUTextureFormat_RGB10A2Unorm",  //[-RENAME=RGB10A2Unorm]
    "WGPUTextureFormat_RG11B10Ufloat", //[-RENAME=RG11B10Ufloat]
    "WGPUTextureFormat_RGB9E5Ufloat",  //[-RENAME=RGB9E5Ufloat]
    "WGPUTextureFormat_RG32Float",     //[-RENAME=RG32Float]
    "WGPUTextureFormat_RG32Uint",      //[-RENAME=RG32Uint]
    "WGPUTextureFormat_RG32Sint",      //[-RENAME=RG32Sint]
    "WGPUTextureFormat_RGBA16Uint",    //[-RENAME=RGBA16Uint]
    "WGPUTextureFormat_RGBA16Sint",    //[-RENAME=RGBA16Sint]
    "WGPUTextureFormat_RGBA16Float",   //[-RENAME=RGBA16Float]
    "WGPUTextureFormat_RGBA32Float",   //[-RENAME=RGBA32Float]
    "WGPUTextureFormat_RGBA32Uint",    //[-RENAME=RGBA32Uint]
    "WGPUTextureFormat_RGBA32Sint",    //[-RENAME=RGBA32Sint]
    "WGPUTextureFormat_Stencil8",      //[-RENAME=Stencil8]
    "WGPUTextureFormat_Depth16Unorm",  //[-RENAME=Depth16Unorm]
    "WGPUTextureFormat_Depth24Plus",   //[-RENAME=Depth24Plus]
    "WGPUTextureFormat_Depth24PlusStencil8", //[-RENAME=Depth24PlusStencil8]
    "WGPUTextureFormat_Depth32Float",  //[-RENAME=Depth32Float]
    "WGPUTextureFormat_Depth32FloatStencil8", //[-RENAME=Depth32FloatStencil8]
    "WGPUTextureFormat_BC1RGBAUnorm",  //[-RENAME=BC1RGBAUnorm]
    "WGPUTextureFormat_BC1RGBAUnormSrgb", //[-RENAME=BC1RGBAUnormSrgb]
    "WGPUTextureFormat_BC2RGBAUnorm",  //[-RENAME=BC2RGBAUnorm]
    "WGPUTextureFormat_BC2RGBAUnormSrgb", //[-RENAME=BC2RGBAUnormSrgb]
    "WGPUTextureFormat_BC3RGBAUnorm",  //[-RENAME=BC3RGBAUnorm]
    "WGPUTextureFormat_BC3RGBAUnormSrgb", //[-RENAME=BC3RGBAUnormSrgb]
    "WGPUTextureFormat_BC4RUnorm",     //[-RENAME=BC4RUnorm]
    "WGPUTextureFormat_BC4RSnorm",     //[-RENAME=BC4RSnorm]
    "WGPUTextureFormat_BC5RGUnorm",    //[-RENAME=BC5RGUnorm]
    "WGPUTextureFormat_BC5RGSnorm",    //[-RENAME=BC5RGSnorm]
    "WGPUTextureFormat_BC6HRGBUfloat", //[-RENAME=BC6HRGBUfloat]
    "WGPUTextureFormat_BC6HRGBFloat",  //[-RENAME=BC6HRGBFloat]
    "WGPUTextureFormat_BC7RGBAUnorm",  //[-RENAME=BC7RGBAUnorm]
    "WGPUTextureFormat_BC7RGBAUnormSrgb", //[-RENAME=BC7RGBAUnormSrgb]
    "WGPUTextureFormat_ETC2RGB8Unorm", //[-RENAME=ETC2RGB8Unorm]
    "WGPUTextureFormat_ETC2RGB8UnormSrgb", //[-RENAME=ETC2RGB8UnormSrgb]
    "WGPUTextureFormat_ETC2RGB8A1Unorm", //[-RENAME=ETC2RGB8A1Unorm]
    "WGPUTextureFormat_ETC2RGB8A1UnormSrgb", //[-RENAME=ETC2RGB8A1UnormSrgb]
    "WGPUTextureFormat_ETC2RGBA8Unorm", //[-RENAME=ETC2RGBA8Unorm]
    "WGPUTextureFormat_ETC2RGBA8UnormSrgb", //[-RENAME=ETC2RGBA8UnormSrgb]
    "WGPUTextureFormat_EACR11Unorm",   //[-RENAME=EACR11Unorm]
    "WGPUTextureFormat_EACR11Snorm",   //[-RENAME=EACR11Snorm]
    "WGPUTextureFormat_EACRG11Unorm",  //[-RENAME=EACRG11Unorm]
    "WGPUTextureFormat_EACRG11Snorm",  //[-RENAME=EACRG11Snorm]
    "WGPUTextureFormat_ASTC4x4Unorm",  //[-RENAME=ASTC4x4Unorm]
    "WGPUTextureFormat_ASTC4x4UnormSrgb", //[-RENAME=ASTC4x4UnormSrgb]
    "WGPUTextureFormat_ASTC5x4Unorm",  //[-RENAME=ASTC5x4Unorm]
    "WGPUTextureFormat_ASTC5x4UnormSrgb", //[-RENAME=ASTC5x4UnormSrgb]
    "WGPUTextureFormat_ASTC5x5Unorm",  //[-RENAME=ASTC5x5Unorm]
    "WGPUTextureFormat_ASTC5x5UnormSrgb", //[-RENAME=ASTC5x5UnormSrgb]
    "WGPUTextureFormat_ASTC6x5Unorm",  //[-RENAME=ASTC6x5Unorm]
    "WGPUTextureFormat_ASTC6x5UnormSrgb", //[-RENAME=ASTC6x5UnormSrgb]
    "WGPUTextureFormat_ASTC6x6Unorm",  //[-RENAME=ASTC6x6Unorm]
    "WGPUTextureFormat_ASTC6x6UnormSrgb", //[-RENAME=ASTC6x6UnormSrgb]
    "WGPUTextureFormat_ASTC8x5Unorm",  //[-RENAME=ASTC8x5Unorm]
    "WGPUTextureFormat_ASTC8x5UnormSrgb", //[-RENAME=ASTC8x5UnormSrgb]
    "WGPUTextureFormat_ASTC8x6Unorm",  //[-RENAME=ASTC8x6Unorm]
    "WGPUTextureFormat_ASTC8x6UnormSrgb", //[-RENAME=ASTC8x6UnormSrgb]
    "WGPUTextureFormat_ASTC8x8Unorm",  //[-RENAME=ASTC8x8Unorm]
    "WGPUTextureFormat_ASTC8x8UnormSrgb", //[-RENAME=ASTC8x8UnormSrgb]
    "WGPUTextureFormat_ASTC10x5Unorm", //[-RENAME=ASTC10x5Unorm]
    "WGPUTextureFormat_ASTC10x5UnormSrgb", //[-RENAME=ASTC10x5UnormSrgb]
    "WGPUTextureFormat_ASTC10x6Unorm", //[-RENAME=ASTC10x6Unorm]
    "WGPUTextureFormat_ASTC10x6UnormSrgb", //[-RENAME=ASTC10x6UnormSrgb]
    "WGPUTextureFormat_ASTC10x8Unorm", //[-RENAME=ASTC10x8Unorm]
    "WGPUTextureFormat_ASTC10x8UnormSrgb", //[-RENAME=ASTC10x8UnormSrgb]
    "WGPUTextureFormat_ASTC10x10Unorm", //[-RENAME=ASTC10x10Unorm]
    "WGPUTextureFormat_ASTC10x10UnormSrgb", //[-RENAME=ASTC10x10UnormSrgb]
    "WGPUTextureFormat_ASTC12x10Unorm", //[-RENAME=ASTC12x10Unorm]
    "WGPUTextureFormat_ASTC12x10UnormSrgb", //[-RENAME=ASTC12x10UnormSrgb]
    "WGPUTextureFormat_ASTC12x12Unorm", //[-RENAME=ASTC12x12Unorm]
    "WGPUTextureFormat_ASTC12x12UnormSrgb", //[-RENAME=ASTC12x12UnormSrgb]
    "WGPUTextureFormat_Force32"        //[-RENAME=Force32]
};

enum WGPUTextureSampleType {
    "WGPUTextureSampleType_BindingNotUsed", //[-RENAME=BindingNotUsed]
    "WGPUTextureSampleType_Undefined", //[-RENAME=Undefined]
    "WGPUTextureSampleType_Float",     //[-RENAME=Float]
    "WGPUTextureSampleType_UnfilterableFloat", //[-RENAME=UnfilterableFloat]
    "WGPUTextureSampleType_Depth",     //[-RENAME=Depth]
    "WGPUTextureSampleType_Sint",      //[-RENAME=Sint]
    "WGPUTextureSampleType_Uint",      //[-RENAME=Uint]
    "WGPUTextureSampleType_Force32"    //[-RENAME=Force32]
};

enum WGPUTextureViewDimension {
    "WGPUTextureViewDimension_Undefined", //[-RENAME=Undefined]
    "WGPUTextureViewDimension_1D",     //[-RENAME=_1D]
    "WGPUTextureViewDimension_2D",     //[-RENAME=_2D]
    "WGPUTextureViewDimension_2DArray", //[-RENAME=_2DArray]
    "WGPUTextureViewDimension_Cube",   //[-RENAME=Cube]
    "WGPUTextureViewDimension_CubeArray", //[-RENAME=CubeArray]
    "WGPUTextureViewDimension_3D",     //[-RENAME=_3D]
    "WGPUTextureViewDimension_Force32" //[-RENAME=Force32]
};

// enum WGPUToneMappingMode {    // TODO missing in wgpu-native header
//     "WGPUToneMappingMode_Standard", //[-RENAME=Standard]
//     "WGPUToneMappingMode_Extended", //[-RENAME=Extended]
//     "WGPUToneMappingMode_Force32" //[-RENAME=Force32]
// };

enum WGPUVertexFormat {
    "WGPUVertexFormat_Uint8",          //[-RENAME=Uint8]
    "WGPUVertexFormat_Uint8x2",        //[-RENAME=Uint8x2]
    "WGPUVertexFormat_Uint8x4",        //[-RENAME=Uint8x4]
    "WGPUVertexFormat_Sint8",          //[-RENAME=Sint8]
    "WGPUVertexFormat_Sint8x2",        //[-RENAME=Sint8x2]
    "WGPUVertexFormat_Sint8x4",        //[-RENAME=Sint8x4]
    "WGPUVertexFormat_Unorm8",         //[-RENAME=Unorm8]
    "WGPUVertexFormat_Unorm8x2",       //[-RENAME=Unorm8x2]
    "WGPUVertexFormat_Unorm8x4",       //[-RENAME=Unorm8x4]
    "WGPUVertexFormat_Snorm8",         //[-RENAME=Snorm8]
    "WGPUVertexFormat_Snorm8x2",       //[-RENAME=Snorm8x2]
    "WGPUVertexFormat_Snorm8x4",       //[-RENAME=Snorm8x4]
    "WGPUVertexFormat_Uint16",         //[-RENAME=Uint16]
    "WGPUVertexFormat_Uint16x2",       //[-RENAME=Uint16x2]
    "WGPUVertexFormat_Uint16x4",       //[-RENAME=Uint16x4]
    "WGPUVertexFormat_Sint16",         //[-RENAME=Sint16]
    "WGPUVertexFormat_Sint16x2",       //[-RENAME=Sint16x2]
    "WGPUVertexFormat_Sint16x4",       //[-RENAME=Sint16x4]
    "WGPUVertexFormat_Unorm16",        //[-RENAME=Unorm16]
    "WGPUVertexFormat_Unorm16x2",      //[-RENAME=Unorm16x2]
    "WGPUVertexFormat_Unorm16x4",      //[-RENAME=Unorm16x4]
    "WGPUVertexFormat_Snorm16",        //[-RENAME=Snorm16]
    "WGPUVertexFormat_Snorm16x2",      //[-RENAME=Snorm16x2]
    "WGPUVertexFormat_Snorm16x4",      //[-RENAME=Snorm16x4]
    "WGPUVertexFormat_Float16",        //[-RENAME=Float16]
    "WGPUVertexFormat_Float16x2",      //[-RENAME=Float16x2]
    "WGPUVertexFormat_Float16x4",      //[-RENAME=Float16x4]
    "WGPUVertexFormat_Float32",        //[-RENAME=Float32]
    "WGPUVertexFormat_Float32x2",      //[-RENAME=Float32x2]
    "WGPUVertexFormat_Float32x3",      //[-RENAME=Float32x3]
    "WGPUVertexFormat_Float32x4",      //[-RENAME=Float32x4]
    "WGPUVertexFormat_Uint32",         //[-RENAME=Uint32]
    "WGPUVertexFormat_Uint32x2",       //[-RENAME=Uint32x2]
    "WGPUVertexFormat_Uint32x3",       //[-RENAME=Uint32x3]
    "WGPUVertexFormat_Uint32x4",       //[-RENAME=Uint32x4]
    "WGPUVertexFormat_Sint32",         //[-RENAME=Sint32]
    "WGPUVertexFormat_Sint32x2",       //[-RENAME=Sint32x2]
    "WGPUVertexFormat_Sint32x3",       //[-RENAME=Sint32x3]
    "WGPUVertexFormat_Sint32x4",       //[-RENAME=Sint32x4]
    "WGPUVertexFormat_Unorm10_10_10_2", //[-RENAME=Unorm10_10_10_2]
    "WGPUVertexFormat_Unorm8x4BGRA",   //[-RENAME=Unorm8x4BGRA]
    "WGPUVertexFormat_Force32"         //[-RENAME=Force32]
};

enum WGPUVertexStepMode {
    "WGPUVertexStepMode_Undefined",    //[-RENAME=Undefined]
    "WGPUVertexStepMode_Vertex",       //[-RENAME=Vertex]
    "WGPUVertexStepMode_Instance",    //[-RENAME=Instance]
    "WGPUVertexStepMode_Force32"       //[-RENAME=Force32]
};

enum WGPUWaitStatus {
    "WGPUWaitStatus_Success",          //[-RENAME=Success]
    "WGPUWaitStatus_TimedOut",         //[-RENAME=TimedOut]
    // "WGPUWaitStatus_Error",    // TODO missing in wgpu-native header
    "WGPUWaitStatus_Force32"           //[-RENAME=Force32]
};

enum WGPUWGSLLanguageFeatureName {
    "WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures",  //[-RENAME=ReadonlyAndReadwriteStorageTextures]
    "WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct",           //[-RENAME=Packed4x8IntegerDotProduct]
    "WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters",        //[-RENAME=UnrestrictedPointerParameters]
    "WGPUWGSLLanguageFeatureName_PointerCompositeAccess",               //[-RENAME=PointerCompositeAccess]
    // "WGPUWGSLLanguageFeatureName_SizedBindingArray",   // TODO missing in wgpu-native header
    "WGPUWGSLLanguageFeatureName_Force32"                               //[-RENAME=Force32]
};