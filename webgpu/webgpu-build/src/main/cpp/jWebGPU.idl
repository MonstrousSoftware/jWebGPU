interface JWebGPU {
    static void Set();
//    static JInstance CreateInstance();
};

interface JInstance {
    void JInstance();
    [Ref] WInstance Get();
    void RequestAdapter(WRequestAdapterOptions options, CallbackMode mode, RequestAdapterCallback callbackInfo);
};

interface JAdapter {
    [Ref] WAdapter Get();
    void RequestDevice(WDeviceDescriptor options, CallbackMode mode, RequestDeviceCallback callbackInfo);
};

interface JDevice {
    [Ref] WDevice Get();

    Status GetAdapterInfo(AdapterInfo adapterInfo);
};

[JSImplementation="RequestAdapterCallback"]
interface RequestAdapterCallbackImpl {
    void RequestAdapterCallbackImpl();
    void OnCallback(RequestAdapterStatus status, JAdapter adapter);
};

interface RequestDeviceCallback {
};

[JSImplementation="RequestDeviceCallback"]
interface RequestDeviceCallbackImpl {
    void RequestDeviceCallbackImpl();
    void OnCallback(RequestDeviceStatus status, JDevice device);
};

interface WDeviceDescriptor {
    void WDeviceDescriptor();
};

interface WInstance {
    void ProcessEvents();
    [Value] Surface CreateSurface([Const] SurfaceDescriptor descriptor);
};

interface WQueue {

};

interface RequestAdapterCallback {
};

interface WFuture {

};

interface WAdapter {

};

interface WDevice {
    [Value] WQueue GetQueue();
};

interface ConvertibleStatus {
};

interface WRequestAdapterOptions {
    void WRequestAdapterOptions();

};

interface AdapterInfo {
    void AdapterInfo();

    [Const, Value] readonly attribute StringView vendor;
    [Const, Value] readonly attribute StringView architecture;
    [Const, Value] readonly attribute StringView device;
    [Const, Value] readonly attribute StringView description;
    [Const] readonly attribute BackendType backendType;

//    StringView const vendor = {};
//    StringView const architecture = {};
//    StringView const device = {};
//    StringView const description = {};
//    BackendType const backendType = BackendType::Undefined;
//    AdapterType const adapterType = {};
//    uint32_t const vendorID = {};
//    uint32_t const deviceID = {};
//    uint32_t const subgroupMinSize = {};
//    uint32_t const subgroupMaxSize = {};
};

interface EmscriptenSurfaceSourceCanvasHTMLSelector {
    void EmscriptenSurfaceSourceCanvasHTMLSelector();

    [Value] attribute StringView selector;
};

interface SurfaceDescriptor {
    void SurfaceDescriptor();

    [Const] attribute ChainedStruct nextInChain;
};

interface Surface {
};

interface ChainedStruct {
};

interface StringView {
    void StringView([Const] DOMString label);

};
StringView implements ChainedStruct;


//interface InstanceDescriptor {
//    void InstanceDescriptor();
//};
//
//

////// ##### STRUCTS #####
//
//interface WGPUStringView {
//};
//
//interface WGPURequestAdapterOptions {
//    void WGPURequestAdapterOptions();
//};
//
//interface WGPUFuture {
//
//};

//// ##### ENUMS #####

enum WGSLLanguageFeatureName {
    "WGSLLanguageFeatureName::ReadonlyAndReadwriteStorageTextures",
    "WGSLLanguageFeatureName::Packed4x8IntegerDotProduct",
    "WGSLLanguageFeatureName::UnrestrictedPointerParameters",
    "WGSLLanguageFeatureName::PointerCompositeAccess",
    "WGSLLanguageFeatureName::SizedBindingArray"
};

enum AdapterType {
    "AdapterType::DiscreteGPU",
    "AdapterType::IntegratedGPU",
    "AdapterType::CPU",
    "AdapterType::Unknown"
};

enum AddressMode {
    "AddressMode::Undefined",
    "AddressMode::ClampToEdge",
    "AddressMode::Repeat",
    "AddressMode::MirrorRepeat"
};

enum BackendType {
    "BackendType::Undefined",
    "BackendType::Null",
    "BackendType::WebGPU",
    "BackendType::D3D11",
    "BackendType::D3D12",
    "BackendType::Metal",
    "BackendType::Vulkan",
    "BackendType::OpenGL",
    "BackendType::OpenGLES"
};

enum BlendFactor {
    "BlendFactor::Undefined",
    "BlendFactor::Zero",
    "BlendFactor::One",
    "BlendFactor::Src",
    "BlendFactor::OneMinusSrc",
    "BlendFactor::SrcAlpha",
    "BlendFactor::OneMinusSrcAlpha",
    "BlendFactor::Dst",
    "BlendFactor::OneMinusDst",
    "BlendFactor::DstAlpha",
    "BlendFactor::OneMinusDstAlpha",
    "BlendFactor::SrcAlphaSaturated",
    "BlendFactor::Constant",
    "BlendFactor::OneMinusConstant",
    "BlendFactor::Src1",
    "BlendFactor::OneMinusSrc1",
    "BlendFactor::Src1Alpha",
    "BlendFactor::OneMinusSrc1Alpha"
};

enum BlendOperation {
    "BlendOperation::Undefined",
    "BlendOperation::Add",
    "BlendOperation::Subtract",
    "BlendOperation::ReverseSubtract",
    "BlendOperation::Min",
    "BlendOperation::Max"
};

enum BufferBindingType {
    "BufferBindingType::BindingNotUsed",
    "BufferBindingType::Undefined",
    "BufferBindingType::Uniform",
    "BufferBindingType::Storage",
    "BufferBindingType::ReadOnlyStorage"
};

enum BufferMapState {
    "BufferMapState::Unmapped",
    "BufferMapState::Pending",
    "BufferMapState::Mapped"
};

enum CallbackMode {
    "CallbackMode::WaitAnyOnly",
    "CallbackMode::AllowProcessEvents",
    "CallbackMode::AllowSpontaneous"
};

enum CompareFunction {
    "CompareFunction::Undefined",
    "CompareFunction::Never",
    "CompareFunction::Less",
    "CompareFunction::Equal",
    "CompareFunction::LessEqual",
    "CompareFunction::Greater",
    "CompareFunction::NotEqual",
    "CompareFunction::GreaterEqual",
    "CompareFunction::Always"
};

enum CompilationInfoRequestStatus {
    "CompilationInfoRequestStatus::Success",
    "CompilationInfoRequestStatus::CallbackCancelled"
};

enum CompilationMessageType {
    "CompilationMessageType::Error",
    "CompilationMessageType::Warning",
    "CompilationMessageType::Info"
};

enum CompositeAlphaMode {
    "CompositeAlphaMode::Auto",
    "CompositeAlphaMode::Opaque",
    "CompositeAlphaMode::Premultiplied",
    "CompositeAlphaMode::Unpremultiplied",
    "CompositeAlphaMode::Inherit"
};

enum CreatePipelineAsyncStatus {
    "CreatePipelineAsyncStatus::Success",
    "CreatePipelineAsyncStatus::CallbackCancelled",
    "CreatePipelineAsyncStatus::ValidationError",
    "CreatePipelineAsyncStatus::InternalError"
};

enum CullMode {
    "CullMode::Undefined",
    "CullMode::None",
    "CullMode::Front",
    "CullMode::Back"
};

enum DeviceLostReason {
    "DeviceLostReason::Unknown",
    "DeviceLostReason::Destroyed",
    "DeviceLostReason::CallbackCancelled",
    "DeviceLostReason::FailedCreation"
};

enum ErrorFilter {
    "ErrorFilter::Validation",
    "ErrorFilter::OutOfMemory",
    "ErrorFilter::Internal"
};

enum ErrorType {
    "ErrorType::NoError",
    "ErrorType::Validation",
    "ErrorType::OutOfMemory",
    "ErrorType::Internal",
    "ErrorType::Unknown"
};

enum FeatureLevel {
    "FeatureLevel::Undefined",
    "FeatureLevel::Compatibility",
    "FeatureLevel::Core"
};

enum FeatureName {
    "FeatureName::DepthClipControl",
    "FeatureName::Depth32FloatStencil8",
    "FeatureName::TimestampQuery",
    "FeatureName::TextureCompressionBC",
    "FeatureName::TextureCompressionBCSliced3D",
    "FeatureName::TextureCompressionETC2",
    "FeatureName::TextureCompressionASTC",
    "FeatureName::TextureCompressionASTCSliced3D",
    "FeatureName::IndirectFirstInstance",
    "FeatureName::ShaderF16",
    "FeatureName::RG11B10UfloatRenderable",
    "FeatureName::BGRA8UnormStorage",
    "FeatureName::Float32Filterable",
    "FeatureName::Float32Blendable",
    "FeatureName::ClipDistances",
    "FeatureName::DualSourceBlending",
    "FeatureName::Subgroups",
    "FeatureName::CoreFeaturesAndLimits",
    "FeatureName::Unorm16TextureFormats",
    "FeatureName::Snorm16TextureFormats",
    "FeatureName::MultiDrawIndirect"
};

enum FilterMode {
    "FilterMode::Undefined",
    "FilterMode::Nearest",
    "FilterMode::Linear"
};

enum FrontFace {
    "FrontFace::Undefined",
    "FrontFace::CCW",
    "FrontFace::CW"
};

enum IndexFormat {
    "IndexFormat::Undefined",
    "IndexFormat::Uint16",
    "IndexFormat::Uint32"
};

enum LoadOp {
    "LoadOp::Undefined",
    "LoadOp::Load",
    "LoadOp::Clear"
};

enum MapAsyncStatus {
    "MapAsyncStatus::Success",
    "MapAsyncStatus::CallbackCancelled",
    "MapAsyncStatus::Error",
    "MapAsyncStatus::Aborted"
};

enum MipmapFilterMode {
    "MipmapFilterMode::Undefined",
    "MipmapFilterMode::Nearest",
    "MipmapFilterMode::Linear"
};

enum PopErrorScopeStatus {
    "PopErrorScopeStatus::Success",
    "PopErrorScopeStatus::CallbackCancelled",
    "PopErrorScopeStatus::Error"
};

enum PowerPreference {
    "PowerPreference::Undefined",
    "PowerPreference::LowPower",
    "PowerPreference::HighPerformance"
};

enum PredefinedColorSpace {
    "PredefinedColorSpace::SRGB",
    "PredefinedColorSpace::DisplayP3"
};

enum PresentMode {
    "PresentMode::Undefined",
    "PresentMode::Fifo",
    "PresentMode::FifoRelaxed",
    "PresentMode::Immediate",
    "PresentMode::Mailbox"
};

enum PrimitiveTopology {
    "PrimitiveTopology::Undefined",
    "PrimitiveTopology::PointList",
    "PrimitiveTopology::LineList",
    "PrimitiveTopology::LineStrip",
    "PrimitiveTopology::TriangleList",
    "PrimitiveTopology::TriangleStrip"
};

enum QueryType {
    "QueryType::Occlusion",
    "QueryType::Timestamp"
};

enum QueueWorkDoneStatus {
    "QueueWorkDoneStatus::Success",
    "QueueWorkDoneStatus::CallbackCancelled",
    "QueueWorkDoneStatus::Error"
};

enum RequestAdapterStatus {
    "RequestAdapterStatus::Success",
    "RequestAdapterStatus::CallbackCancelled",
    "RequestAdapterStatus::Unavailable",
    "RequestAdapterStatus::Error"
};

enum RequestDeviceStatus {
    "RequestDeviceStatus::Success",
    "RequestDeviceStatus::CallbackCancelled",
    "RequestDeviceStatus::Error"
};

enum SType {
    "SType::ShaderSourceSPIRV",
    "SType::ShaderSourceWGSL",
    "SType::RenderPassMaxDrawCount",
    "SType::SurfaceSourceMetalLayer",
    "SType::SurfaceSourceWindowsHWND",
    "SType::SurfaceSourceXlibWindow",
    "SType::SurfaceSourceWaylandSurface",
    "SType::SurfaceSourceAndroidNativeWindow",
    "SType::SurfaceSourceXCBWindow",
    "SType::SurfaceColorManagement",
    "SType::RequestAdapterWebXROptions",
    "SType::AdapterPropertiesSubgroups",
    "SType::BindGroupLayoutEntryArraySize",
    "SType::TextureBindingViewDimensionDescriptor",
    "SType::EmscriptenSurfaceSourceCanvasHTMLSelector",
    "SType::DawnCompilationMessageUtf16"
};

enum SamplerBindingType {
    "SamplerBindingType::BindingNotUsed",
    "SamplerBindingType::Undefined",
    "SamplerBindingType::Filtering",
    "SamplerBindingType::NonFiltering",
    "SamplerBindingType::Comparison"
};

enum Status {
    "Status::Success",
    "Status::Error"
};

enum StencilOperation {
    "StencilOperation::Undefined",
    "StencilOperation::Keep",
    "StencilOperation::Zero",
    "StencilOperation::Replace",
    "StencilOperation::Invert",
    "StencilOperation::IncrementClamp",
    "StencilOperation::DecrementClamp",
    "StencilOperation::IncrementWrap",
    "StencilOperation::DecrementWrap"
};

enum StorageTextureAccess {
    "StorageTextureAccess::BindingNotUsed",
    "StorageTextureAccess::Undefined",
    "StorageTextureAccess::WriteOnly",
    "StorageTextureAccess::ReadOnly",
    "StorageTextureAccess::ReadWrite"
};

enum StoreOp {
    "StoreOp::Undefined",
    "StoreOp::Store",
    "StoreOp::Discard"
};

enum SubgroupMatrixComponentType {
    "SubgroupMatrixComponentType::F32",
    "SubgroupMatrixComponentType::F16",
    "SubgroupMatrixComponentType::U32",
    "SubgroupMatrixComponentType::I32"
};

enum SurfaceGetCurrentTextureStatus {
    "SurfaceGetCurrentTextureStatus::SuccessOptimal",
    "SurfaceGetCurrentTextureStatus::SuccessSuboptimal",
    "SurfaceGetCurrentTextureStatus::Timeout",
    "SurfaceGetCurrentTextureStatus::Outdated",
    "SurfaceGetCurrentTextureStatus::Lost",
    "SurfaceGetCurrentTextureStatus::Error"
};

enum TextureAspect {
    "TextureAspect::Undefined",
    "TextureAspect::All",
    "TextureAspect::StencilOnly",
    "TextureAspect::DepthOnly"
};

enum TextureDimension {
    "TextureDimension::Undefined",
    "TextureDimension::e1D",
    "TextureDimension::e2D",
    "TextureDimension::e3D"
};

enum TextureFormat {
    "TextureFormat::Undefined",
    "TextureFormat::R8Unorm",
    "TextureFormat::R8Snorm",
    "TextureFormat::R8Uint",
    "TextureFormat::R8Sint",
    "TextureFormat::R16Uint",
    "TextureFormat::R16Sint",
    "TextureFormat::R16Float",
    "TextureFormat::RG8Unorm",
    "TextureFormat::RG8Snorm",
    "TextureFormat::RG8Uint",
    "TextureFormat::RG8Sint",
    "TextureFormat::R32Float",
    "TextureFormat::R32Uint",
    "TextureFormat::R32Sint",
    "TextureFormat::RG16Uint",
    "TextureFormat::RG16Sint",
    "TextureFormat::RG16Float",
    "TextureFormat::RGBA8Unorm",
    "TextureFormat::RGBA8UnormSrgb",
    "TextureFormat::RGBA8Snorm",
    "TextureFormat::RGBA8Uint",
    "TextureFormat::RGBA8Sint",
    "TextureFormat::BGRA8Unorm",
    "TextureFormat::BGRA8UnormSrgb",
    "TextureFormat::RGB10A2Uint",
    "TextureFormat::RGB10A2Unorm",
    "TextureFormat::RG11B10Ufloat",
    "TextureFormat::RGB9E5Ufloat",
    "TextureFormat::RG32Float",
    "TextureFormat::RG32Uint",
    "TextureFormat::RG32Sint",
    "TextureFormat::RGBA16Uint",
    "TextureFormat::RGBA16Sint",
    "TextureFormat::RGBA16Float",
    "TextureFormat::RGBA32Float",
    "TextureFormat::RGBA32Uint",
    "TextureFormat::RGBA32Sint",
    "TextureFormat::Stencil8",
    "TextureFormat::Depth16Unorm",
    "TextureFormat::Depth24Plus",
    "TextureFormat::Depth24PlusStencil8",
    "TextureFormat::Depth32Float",
    "TextureFormat::Depth32FloatStencil8",
    "TextureFormat::BC1RGBAUnorm",
    "TextureFormat::BC1RGBAUnormSrgb",
    "TextureFormat::BC2RGBAUnorm",
    "TextureFormat::BC2RGBAUnormSrgb",
    "TextureFormat::BC3RGBAUnorm",
    "TextureFormat::BC3RGBAUnormSrgb",
    "TextureFormat::BC4RUnorm",
    "TextureFormat::BC4RSnorm",
    "TextureFormat::BC5RGUnorm",
    "TextureFormat::BC5RGSnorm",
    "TextureFormat::BC6HRGBUfloat",
    "TextureFormat::BC6HRGBFloat",
    "TextureFormat::BC7RGBAUnorm",
    "TextureFormat::BC7RGBAUnormSrgb",
    "TextureFormat::ETC2RGB8Unorm",
    "TextureFormat::ETC2RGB8UnormSrgb",
    "TextureFormat::ETC2RGB8A1Unorm",
    "TextureFormat::ETC2RGB8A1UnormSrgb",
    "TextureFormat::ETC2RGBA8Unorm",
    "TextureFormat::ETC2RGBA8UnormSrgb",
    "TextureFormat::EACR11Unorm",
    "TextureFormat::EACR11Snorm",
    "TextureFormat::EACRG11Unorm",
    "TextureFormat::EACRG11Snorm",
    "TextureFormat::ASTC4x4Unorm",
    "TextureFormat::ASTC4x4UnormSrgb",
    "TextureFormat::ASTC5x4Unorm",
    "TextureFormat::ASTC5x4UnormSrgb",
    "TextureFormat::ASTC5x5Unorm",
    "TextureFormat::ASTC5x5UnormSrgb",
    "TextureFormat::ASTC6x5Unorm",
    "TextureFormat::ASTC6x5UnormSrgb",
    "TextureFormat::ASTC6x6Unorm",
    "TextureFormat::ASTC6x6UnormSrgb",
    "TextureFormat::ASTC8x5Unorm",
    "TextureFormat::ASTC8x5UnormSrgb",
    "TextureFormat::ASTC8x6Unorm",
    "TextureFormat::ASTC8x6UnormSrgb",
    "TextureFormat::ASTC8x8Unorm",
    "TextureFormat::ASTC8x8UnormSrgb",
    "TextureFormat::ASTC10x5Unorm",
    "TextureFormat::ASTC10x5UnormSrgb",
    "TextureFormat::ASTC10x6Unorm",
    "TextureFormat::ASTC10x6UnormSrgb",
    "TextureFormat::ASTC10x8Unorm",
    "TextureFormat::ASTC10x8UnormSrgb",
    "TextureFormat::ASTC10x10Unorm",
    "TextureFormat::ASTC10x10UnormSrgb",
    "TextureFormat::ASTC12x10Unorm",
    "TextureFormat::ASTC12x10UnormSrgb",
    "TextureFormat::ASTC12x12Unorm",
    "TextureFormat::ASTC12x12UnormSrgb"
};

enum TextureSampleType {
    "TextureSampleType::BindingNotUsed",
    "TextureSampleType::Undefined",
    "TextureSampleType::Float",
    "TextureSampleType::UnfilterableFloat",
    "TextureSampleType::Depth",
    "TextureSampleType::Sint",
    "TextureSampleType::Uint"
};

enum TextureViewDimension {
    "TextureViewDimension::Undefined",
    "TextureViewDimension::e1D",
    "TextureViewDimension::e2D",
    "TextureViewDimension::e2DArray",
    "TextureViewDimension::Cube",
    "TextureViewDimension::CubeArray",
    "TextureViewDimension::e3D"
};

enum ToneMappingMode {
    "ToneMappingMode::Standard",
    "ToneMappingMode::Extended"
};

enum VertexFormat {
    "VertexFormat::Uint8",
    "VertexFormat::Uint8x2",
    "VertexFormat::Uint8x4",
    "VertexFormat::Sint8",
    "VertexFormat::Sint8x2",
    "VertexFormat::Sint8x4",
    "VertexFormat::Unorm8",
    "VertexFormat::Unorm8x2",
    "VertexFormat::Unorm8x4",
    "VertexFormat::Snorm8",
    "VertexFormat::Snorm8x2",
    "VertexFormat::Snorm8x4",
    "VertexFormat::Uint16",
    "VertexFormat::Uint16x2",
    "VertexFormat::Uint16x4",
    "VertexFormat::Sint16",
    "VertexFormat::Sint16x2",
    "VertexFormat::Sint16x4",
    "VertexFormat::Unorm16",
    "VertexFormat::Unorm16x2",
    "VertexFormat::Unorm16x4",
    "VertexFormat::Snorm16",
    "VertexFormat::Snorm16x2",
    "VertexFormat::Snorm16x4",
    "VertexFormat::Float16",
    "VertexFormat::Float16x2",
    "VertexFormat::Float16x4",
    "VertexFormat::Float32",
    "VertexFormat::Float32x2",
    "VertexFormat::Float32x3",
    "VertexFormat::Float32x4",
    "VertexFormat::Uint32",
    "VertexFormat::Uint32x2",
    "VertexFormat::Uint32x3",
    "VertexFormat::Uint32x4",
    "VertexFormat::Sint32",
    "VertexFormat::Sint32x2",
    "VertexFormat::Sint32x3",
    "VertexFormat::Sint32x4",
    "VertexFormat::Unorm10_10_10_2",
    "VertexFormat::Unorm8x4BGRA"
};

enum VertexStepMode {
    "VertexStepMode::Undefined",
    "VertexStepMode::Vertex",
    "VertexStepMode::Instance"
};

enum WaitStatus {
    "WaitStatus::Success",
    "WaitStatus::TimedOut",
    "WaitStatus::Error"
};

enum BufferUsage {
    "BufferUsage::None",
    "BufferUsage::MapRead",
    "BufferUsage::MapWrite",
    "BufferUsage::CopySrc",
    "BufferUsage::CopyDst",
    "BufferUsage::Index",
    "BufferUsage::Vertex",
    "BufferUsage::Uniform",
    "BufferUsage::Storage",
    "BufferUsage::Indirect",
    "BufferUsage::QueryResolve"
};

enum ColorWriteMask {
    "ColorWriteMask::None",
    "ColorWriteMask::Red",
    "ColorWriteMask::Green",
    "ColorWriteMask::Blue",
    "ColorWriteMask::Alpha",
    "ColorWriteMask::All"
};

enum MapMode {
    "MapMode::None",
    "MapMode::Read",
    "MapMode::Write"
};

enum ShaderStage {
    "ShaderStage::None",
    "ShaderStage::Vertex",
    "ShaderStage::Fragment",
    "ShaderStage::Compute"
};

enum TextureUsage {
    "TextureUsage::None",
    "TextureUsage::CopySrc",
    "TextureUsage::CopyDst",
    "TextureUsage::TextureBinding",
    "TextureUsage::StorageBinding",
    "TextureUsage::RenderAttachment"
};